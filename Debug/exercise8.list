
exercise8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080048c8  080048c8  000058c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f8  080049f8  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  080049f8  080049f8  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049f8  080049f8  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049fc  080049fc  000059fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004a00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000197c  20000014  08004a14  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001990  08004a14  00006990  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c58d  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002373  00000000  00000000  000125ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00014940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000884  00000000  00000000  00015488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020c1  00000000  00000000  00015d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc95  00000000  00000000  00017dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d79  00000000  00000000  00024a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad7db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cec  00000000  00000000  000ad820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	080048b0 	.word	0x080048b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	080048b0 	.word	0x080048b0

08000150 <AccessSharedResource>:
osSemaphoreDef(CriticalResourceSemaphore);


volatile int StartFlag = 1;

void AccessSharedResource() {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    // Try to acquire the semaphore, but do not block
    if (osSemaphoreAcquire(CriticalResourceSemaphoreHandle, osWaitForever) == osOK) {
 8000154:	4b19      	ldr	r3, [pc, #100]	@ (80001bc <AccessSharedResource+0x6c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	f04f 31ff 	mov.w	r1, #4294967295
 800015c:	4618      	mov	r0, r3
 800015e:	f001 fa9f 	bl	80016a0 <osSemaphoreAcquire>
 8000162:	4603      	mov	r3, r0
 8000164:	2b00      	cmp	r3, #0
 8000166:	d120      	bne.n	80001aa <AccessSharedResource+0x5a>
        // Resource is available, proceed with accessing the shared resource
        if (StartFlag == 1) {
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <AccessSharedResource+0x70>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d103      	bne.n	8000178 <AccessSharedResource+0x28>
            StartFlag = 0;  // Mark the resource as being accessed
 8000170:	4b13      	ldr	r3, [pc, #76]	@ (80001c0 <AccessSharedResource+0x70>)
 8000172:	2200      	movs	r2, #0
 8000174:	601a      	str	r2, [r3, #0]
 8000176:	e005      	b.n	8000184 <AccessSharedResource+0x34>
        } else {
            HAL_GPIO_WritePin(LED_Indicator_GPIO_Port, LED_Indicator_Pin, GPIO_PIN_SET); // Blue LED ON, indicating contention
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800017e:	4811      	ldr	r0, [pc, #68]	@ (80001c4 <AccessSharedResource+0x74>)
 8000180:	f000 fcbe 	bl	8000b00 <HAL_GPIO_WritePin>
        }

        osDelay(1000);  // Simulate working with the resource
 8000184:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000188:	f001 f9c0 	bl	800150c <osDelay>

        StartFlag = 1;  // Mark the resource as available again
 800018c:	4b0c      	ldr	r3, [pc, #48]	@ (80001c0 <AccessSharedResource+0x70>)
 800018e:	2201      	movs	r2, #1
 8000190:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_Indicator_GPIO_Port, LED_Indicator_Pin, GPIO_PIN_RESET);  // Blue LED OFF
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000198:	480a      	ldr	r0, [pc, #40]	@ (80001c4 <AccessSharedResource+0x74>)
 800019a:	f000 fcb1 	bl	8000b00 <HAL_GPIO_WritePin>

        // Release the semaphore after finishing with the resource
        osSemaphoreRelease(CriticalResourceSemaphoreHandle);  // Release the semaphore
 800019e:	4b07      	ldr	r3, [pc, #28]	@ (80001bc <AccessSharedResource+0x6c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f001 fae2 	bl	800176c <osSemaphoreRelease>
    } else {
        // Semaphore is already taken by another task
        // Handle the case when resource is unavailable (optional)
        HAL_GPIO_WritePin(LED_Indicator_GPIO_Port, LED_Indicator_Pin, GPIO_PIN_SET);  // Optionally, show contention by turning on Blue LED
    }
}
 80001a8:	e005      	b.n	80001b6 <AccessSharedResource+0x66>
        HAL_GPIO_WritePin(LED_Indicator_GPIO_Port, LED_Indicator_Pin, GPIO_PIN_SET);  // Optionally, show contention by turning on Blue LED
 80001aa:	2201      	movs	r2, #1
 80001ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001b0:	4804      	ldr	r0, [pc, #16]	@ (80001c4 <AccessSharedResource+0x74>)
 80001b2:	f000 fca5 	bl	8000b00 <HAL_GPIO_WritePin>
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	20000040 	.word	0x20000040
 80001c0:	20000000 	.word	0x20000000
 80001c4:	40010800 	.word	0x40010800

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9ce 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f84c 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f886 	bl	80002e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001d8:	f001 f888 	bl	80012ec <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CriticalResourceSemaphore */
  CriticalResourceSemaphoreHandle = osSemaphoreNew(1, 1, &CriticalResourceSemaphore_attributes);
 80001dc:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <main+0x6c>)
 80001de:	2101      	movs	r1, #1
 80001e0:	2001      	movs	r0, #1
 80001e2:	f001 f9c1 	bl	8001568 <osSemaphoreNew>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4a13      	ldr	r2, [pc, #76]	@ (8000238 <main+0x70>)
 80001ea:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001ec:	4a13      	ldr	r2, [pc, #76]	@ (800023c <main+0x74>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	4813      	ldr	r0, [pc, #76]	@ (8000240 <main+0x78>)
 80001f2:	f001 f8e1 	bl	80013b8 <osThreadNew>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a12      	ldr	r2, [pc, #72]	@ (8000244 <main+0x7c>)
 80001fa:	6013      	str	r3, [r2, #0]

  /* creation of FlashGreenLed */
  FlashGreenLedHandle = osThreadNew(FlashGreenLedTask, NULL, &FlashGreenLed_attributes);
 80001fc:	4a12      	ldr	r2, [pc, #72]	@ (8000248 <main+0x80>)
 80001fe:	2100      	movs	r1, #0
 8000200:	4812      	ldr	r0, [pc, #72]	@ (800024c <main+0x84>)
 8000202:	f001 f8d9 	bl	80013b8 <osThreadNew>
 8000206:	4603      	mov	r3, r0
 8000208:	4a11      	ldr	r2, [pc, #68]	@ (8000250 <main+0x88>)
 800020a:	6013      	str	r3, [r2, #0]

  /* creation of FlashRedLed */
  FlashRedLedHandle = osThreadNew(FlashRedLedTask, NULL, &FlashRedLed_attributes);
 800020c:	4a11      	ldr	r2, [pc, #68]	@ (8000254 <main+0x8c>)
 800020e:	2100      	movs	r1, #0
 8000210:	4811      	ldr	r0, [pc, #68]	@ (8000258 <main+0x90>)
 8000212:	f001 f8d1 	bl	80013b8 <osThreadNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a10      	ldr	r2, [pc, #64]	@ (800025c <main+0x94>)
 800021a:	6013      	str	r3, [r2, #0]

  /* creation of FlashOrangeLed */
  FlashOrangeLedHandle = osThreadNew(FlashOrangeLedTask, NULL, &FlashOrangeLed_attributes);
 800021c:	4a10      	ldr	r2, [pc, #64]	@ (8000260 <main+0x98>)
 800021e:	2100      	movs	r1, #0
 8000220:	4810      	ldr	r0, [pc, #64]	@ (8000264 <main+0x9c>)
 8000222:	f001 f8c9 	bl	80013b8 <osThreadNew>
 8000226:	4603      	mov	r3, r0
 8000228:	4a0f      	ldr	r2, [pc, #60]	@ (8000268 <main+0xa0>)
 800022a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800022c:	f001 f890 	bl	8001350 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000230:	bf00      	nop
 8000232:	e7fd      	b.n	8000230 <main+0x68>
 8000234:	080049c4 	.word	0x080049c4
 8000238:	20000040 	.word	0x20000040
 800023c:	08004934 	.word	0x08004934
 8000240:	08000391 	.word	0x08000391
 8000244:	20000030 	.word	0x20000030
 8000248:	08004958 	.word	0x08004958
 800024c:	080003a1 	.word	0x080003a1
 8000250:	20000034 	.word	0x20000034
 8000254:	0800497c 	.word	0x0800497c
 8000258:	080003d9 	.word	0x080003d9
 800025c:	20000038 	.word	0x20000038
 8000260:	080049a0 	.word	0x080049a0
 8000264:	08000415 	.word	0x08000415
 8000268:	2000003c 	.word	0x2000003c

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	@ 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	@ 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f004 fade 	bl	800483c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2310      	movs	r3, #16
 8000298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029a:	2300      	movs	r3, #0
 800029c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fc44 	bl	8000b30 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ae:	f000 f8cb 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 feb2 	bl	8001034 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f8b7 	bl	8000448 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	@ 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f8:	4b22      	ldr	r3, [pc, #136]	@ (8000384 <MX_GPIO_Init+0xa0>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a21      	ldr	r2, [pc, #132]	@ (8000384 <MX_GPIO_Init+0xa0>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b1f      	ldr	r3, [pc, #124]	@ (8000384 <MX_GPIO_Init+0xa0>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <MX_GPIO_Init+0xa0>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a1b      	ldr	r2, [pc, #108]	@ (8000384 <MX_GPIO_Init+0xa0>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b19      	ldr	r3, [pc, #100]	@ (8000384 <MX_GPIO_Init+0xa0>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Orange_LED_GPIO_Port, Orange_LED_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800032e:	4816      	ldr	r0, [pc, #88]	@ (8000388 <MX_GPIO_Init+0xa4>)
 8000330:	f000 fbe6 	bl	8000b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Red_LED_Pin|LED_Indicator_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6130 	mov.w	r1, #2816	@ 0xb00
 800033a:	4814      	ldr	r0, [pc, #80]	@ (800038c <MX_GPIO_Init+0xa8>)
 800033c:	f000 fbe0 	bl	8000b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Orange_LED_Pin */
  GPIO_InitStruct.Pin = Orange_LED_Pin;
 8000340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	2302      	movs	r3, #2
 8000350:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Orange_LED_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	4619      	mov	r1, r3
 8000358:	480b      	ldr	r0, [pc, #44]	@ (8000388 <MX_GPIO_Init+0xa4>)
 800035a:	f000 fa4d 	bl	80007f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin LED_Indicator_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|LED_Indicator_Pin;
 800035e:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8000362:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2302      	movs	r3, #2
 800036e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000370:	f107 0308 	add.w	r3, r7, #8
 8000374:	4619      	mov	r1, r3
 8000376:	4805      	ldr	r0, [pc, #20]	@ (800038c <MX_GPIO_Init+0xa8>)
 8000378:	f000 fa3e 	bl	80007f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037c:	bf00      	nop
 800037e:	3718      	adds	r7, #24
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40010800 	.word	0x40010800

08000390 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000398:	2001      	movs	r0, #1
 800039a:	f001 f8b7 	bl	800150c <osDelay>
 800039e:	e7fb      	b.n	8000398 <StartDefaultTask+0x8>

080003a0 <FlashGreenLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashGreenLedTask */
void FlashGreenLedTask(void *argument)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashGreenLedTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET); // Turn Blue LED on
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003ae:	4809      	ldr	r0, [pc, #36]	@ (80003d4 <FlashGreenLedTask+0x34>)
 80003b0:	f000 fba6 	bl	8000b00 <HAL_GPIO_WritePin>
	  AccessSharedResource();
 80003b4:	f7ff fecc 	bl	8000150 <AccessSharedResource>
	  osDelay(200);
 80003b8:	20c8      	movs	r0, #200	@ 0xc8
 80003ba:	f001 f8a7 	bl	800150c <osDelay>
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin,	 GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003c4:	4803      	ldr	r0, [pc, #12]	@ (80003d4 <FlashGreenLedTask+0x34>)
 80003c6:	f000 fb9b 	bl	8000b00 <HAL_GPIO_WritePin>
	  osDelay(200);
 80003ca:	20c8      	movs	r0, #200	@ 0xc8
 80003cc:	f001 f89e 	bl	800150c <osDelay>
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET); // Turn Blue LED on
 80003d0:	bf00      	nop
 80003d2:	e7e9      	b.n	80003a8 <FlashGreenLedTask+0x8>
 80003d4:	40010800 	.word	0x40010800

080003d8 <FlashRedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashRedLedTask */
void FlashRedLedTask(void *argument)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashRedLedTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET); // Turn Blue LED on
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003e6:	480a      	ldr	r0, [pc, #40]	@ (8000410 <FlashRedLedTask+0x38>)
 80003e8:	f000 fb8a 	bl	8000b00 <HAL_GPIO_WritePin>
	  AccessSharedResource();
 80003ec:	f7ff feb0 	bl	8000150 <AccessSharedResource>
	  osDelay(550);
 80003f0:	f240 2026 	movw	r0, #550	@ 0x226
 80003f4:	f001 f88a 	bl	800150c <osDelay>
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003fe:	4804      	ldr	r0, [pc, #16]	@ (8000410 <FlashRedLedTask+0x38>)
 8000400:	f000 fb7e 	bl	8000b00 <HAL_GPIO_WritePin>
	  osDelay(550);
 8000404:	f240 2026 	movw	r0, #550	@ 0x226
 8000408:	f001 f880 	bl	800150c <osDelay>
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET); // Turn Blue LED on
 800040c:	bf00      	nop
 800040e:	e7e7      	b.n	80003e0 <FlashRedLedTask+0x8>
 8000410:	40010800 	.word	0x40010800

08000414 <FlashOrangeLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FlashOrangeLedTask */
void FlashOrangeLedTask(void *argument)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FlashOrangeLedTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(Orange_LED_GPIO_Port, Orange_LED_Pin, GPIO_PIN_SET); // Turn Blue LED on
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000422:	4808      	ldr	r0, [pc, #32]	@ (8000444 <FlashOrangeLedTask+0x30>)
 8000424:	f000 fb6c 	bl	8000b00 <HAL_GPIO_WritePin>
	  osDelay(50);
 8000428:	2032      	movs	r0, #50	@ 0x32
 800042a:	f001 f86f 	bl	800150c <osDelay>
	  HAL_GPIO_WritePin(Orange_LED_GPIO_Port, Orange_LED_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000434:	4803      	ldr	r0, [pc, #12]	@ (8000444 <FlashOrangeLedTask+0x30>)
 8000436:	f000 fb63 	bl	8000b00 <HAL_GPIO_WritePin>
	  osDelay(50);
 800043a:	2032      	movs	r0, #50	@ 0x32
 800043c:	f001 f866 	bl	800150c <osDelay>
	  HAL_GPIO_WritePin(Orange_LED_GPIO_Port, Orange_LED_Pin, GPIO_PIN_SET); // Turn Blue LED on
 8000440:	bf00      	nop
 8000442:	e7eb      	b.n	800041c <FlashOrangeLedTask+0x8>
 8000444:	40010c00 	.word	0x40010c00

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <Error_Handler+0x8>

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045a:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <HAL_MspInit+0x68>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a17      	ldr	r2, [pc, #92]	@ (80004bc <HAL_MspInit+0x68>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <HAL_MspInit+0x68>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b12      	ldr	r3, [pc, #72]	@ (80004bc <HAL_MspInit+0x68>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a11      	ldr	r2, [pc, #68]	@ (80004bc <HAL_MspInit+0x68>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_MspInit+0x68>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	210f      	movs	r1, #15
 800048e:	f06f 0001 	mvn.w	r0, #1
 8000492:	f000 f988 	bl	80007a6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000496:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <HAL_MspInit+0x6c>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	4a04      	ldr	r2, [pc, #16]	@ (80004c0 <HAL_MspInit+0x6c>)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010000 	.word	0x40010000

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <NMI_Handler+0x4>

080004cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <HardFault_Handler+0x4>

080004d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <MemManage_Handler+0x4>

080004dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fc:	f000 f87c 	bl	80005f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000500:	f003 f8c0 	bl	8003684 <xTaskGetSchedulerState>
 8000504:	4603      	mov	r3, r0
 8000506:	2b01      	cmp	r3, #1
 8000508:	d001      	beq.n	800050e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800050a:	f003 ff35 	bl	8004378 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}

08000512 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
	...

08000520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000520:	f7ff fff7 	bl	8000512 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000524:	480b      	ldr	r0, [pc, #44]	@ (8000554 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000526:	490c      	ldr	r1, [pc, #48]	@ (8000558 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000528:	4a0c      	ldr	r2, [pc, #48]	@ (800055c <LoopFillZerobss+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800053c:	4c09      	ldr	r4, [pc, #36]	@ (8000564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054a:	f004 f97f 	bl	800484c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fe3b 	bl	80001c8 <main>
  bx lr
 8000552:	4770      	bx	lr
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800055c:	08004a00 	.word	0x08004a00
  ldr r2, =_sbss
 8000560:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000564:	20001990 	.word	0x20001990

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <HAL_Init+0x28>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a07      	ldr	r2, [pc, #28]	@ (8000594 <HAL_Init+0x28>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f907 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	200f      	movs	r0, #15
 8000584:	f000 f808 	bl	8000598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000588:	f7ff ff64 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <HAL_InitTick+0x54>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <HAL_InitTick+0x58>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f911 	bl	80007de <HAL_SYSTICK_Config>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e00e      	b.n	80005e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b0f      	cmp	r3, #15
 80005ca:	d80a      	bhi.n	80005e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005cc:	2200      	movs	r2, #0
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	f04f 30ff 	mov.w	r0, #4294967295
 80005d4:	f000 f8e7 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d8:	4a06      	ldr	r2, [pc, #24]	@ (80005f4 <HAL_InitTick+0x5c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	e000      	b.n	80005e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004
 80005f0:	2000000c 	.word	0x2000000c
 80005f4:	20000008 	.word	0x20000008

080005f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <HAL_IncTick+0x1c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b05      	ldr	r3, [pc, #20]	@ (8000618 <HAL_IncTick+0x20>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	4a03      	ldr	r2, [pc, #12]	@ (8000618 <HAL_IncTick+0x20>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	2000000c 	.word	0x2000000c
 8000618:	20000044 	.word	0x20000044

0800061c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return uwTick;
 8000620:	4b02      	ldr	r3, [pc, #8]	@ (800062c <HAL_GetTick+0x10>)
 8000622:	681b      	ldr	r3, [r3, #0]
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	20000044 	.word	0x20000044

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	@ (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	@ (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	@ 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	@ 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff90 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	@ (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff49 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff5e 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff90 	bl	80006e8 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5f 	bl	8000694 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffb0 	bl	800074c <SysTick_Config>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b08b      	sub	sp, #44	@ 0x2c
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080a:	e169      	b.n	8000ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800080c:	2201      	movs	r2, #1
 800080e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	69fa      	ldr	r2, [r7, #28]
 800081c:	4013      	ands	r3, r2
 800081e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	429a      	cmp	r2, r3
 8000826:	f040 8158 	bne.w	8000ada <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	4a9a      	ldr	r2, [pc, #616]	@ (8000a98 <HAL_GPIO_Init+0x2a0>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d05e      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000834:	4a98      	ldr	r2, [pc, #608]	@ (8000a98 <HAL_GPIO_Init+0x2a0>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d875      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 800083a:	4a98      	ldr	r2, [pc, #608]	@ (8000a9c <HAL_GPIO_Init+0x2a4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d058      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000840:	4a96      	ldr	r2, [pc, #600]	@ (8000a9c <HAL_GPIO_Init+0x2a4>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d86f      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 8000846:	4a96      	ldr	r2, [pc, #600]	@ (8000aa0 <HAL_GPIO_Init+0x2a8>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d052      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 800084c:	4a94      	ldr	r2, [pc, #592]	@ (8000aa0 <HAL_GPIO_Init+0x2a8>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d869      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 8000852:	4a94      	ldr	r2, [pc, #592]	@ (8000aa4 <HAL_GPIO_Init+0x2ac>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d04c      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000858:	4a92      	ldr	r2, [pc, #584]	@ (8000aa4 <HAL_GPIO_Init+0x2ac>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d863      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 800085e:	4a92      	ldr	r2, [pc, #584]	@ (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d046      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000864:	4a90      	ldr	r2, [pc, #576]	@ (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d85d      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 800086a:	2b12      	cmp	r3, #18
 800086c:	d82a      	bhi.n	80008c4 <HAL_GPIO_Init+0xcc>
 800086e:	2b12      	cmp	r3, #18
 8000870:	d859      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 8000872:	a201      	add	r2, pc, #4	@ (adr r2, 8000878 <HAL_GPIO_Init+0x80>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	080008f3 	.word	0x080008f3
 800087c:	080008cd 	.word	0x080008cd
 8000880:	080008df 	.word	0x080008df
 8000884:	08000921 	.word	0x08000921
 8000888:	08000927 	.word	0x08000927
 800088c:	08000927 	.word	0x08000927
 8000890:	08000927 	.word	0x08000927
 8000894:	08000927 	.word	0x08000927
 8000898:	08000927 	.word	0x08000927
 800089c:	08000927 	.word	0x08000927
 80008a0:	08000927 	.word	0x08000927
 80008a4:	08000927 	.word	0x08000927
 80008a8:	08000927 	.word	0x08000927
 80008ac:	08000927 	.word	0x08000927
 80008b0:	08000927 	.word	0x08000927
 80008b4:	08000927 	.word	0x08000927
 80008b8:	08000927 	.word	0x08000927
 80008bc:	080008d5 	.word	0x080008d5
 80008c0:	080008e9 	.word	0x080008e9
 80008c4:	4a79      	ldr	r2, [pc, #484]	@ (8000aac <HAL_GPIO_Init+0x2b4>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d013      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ca:	e02c      	b.n	8000926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	623b      	str	r3, [r7, #32]
          break;
 80008d2:	e029      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	3304      	adds	r3, #4
 80008da:	623b      	str	r3, [r7, #32]
          break;
 80008dc:	e024      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	3308      	adds	r3, #8
 80008e4:	623b      	str	r3, [r7, #32]
          break;
 80008e6:	e01f      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	330c      	adds	r3, #12
 80008ee:	623b      	str	r3, [r7, #32]
          break;
 80008f0:	e01a      	b.n	8000928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008fa:	2304      	movs	r3, #4
 80008fc:	623b      	str	r3, [r7, #32]
          break;
 80008fe:	e013      	b.n	8000928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d105      	bne.n	8000914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000908:	2308      	movs	r3, #8
 800090a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	611a      	str	r2, [r3, #16]
          break;
 8000912:	e009      	b.n	8000928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000914:	2308      	movs	r3, #8
 8000916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	615a      	str	r2, [r3, #20]
          break;
 800091e:	e003      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
          break;
 8000924:	e000      	b.n	8000928 <HAL_GPIO_Init+0x130>
          break;
 8000926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	2bff      	cmp	r3, #255	@ 0xff
 800092c:	d801      	bhi.n	8000932 <HAL_GPIO_Init+0x13a>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	e001      	b.n	8000936 <HAL_GPIO_Init+0x13e>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	2bff      	cmp	r3, #255	@ 0xff
 800093c:	d802      	bhi.n	8000944 <HAL_GPIO_Init+0x14c>
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	e002      	b.n	800094a <HAL_GPIO_Init+0x152>
 8000944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000946:	3b08      	subs	r3, #8
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	210f      	movs	r1, #15
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	401a      	ands	r2, r3
 800095c:	6a39      	ldr	r1, [r7, #32]
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	431a      	orrs	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 80b1 	beq.w	8000ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000978:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab0 <HAL_GPIO_Init+0x2b8>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a4c      	ldr	r2, [pc, #304]	@ (8000ab0 <HAL_GPIO_Init+0x2b8>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab0 <HAL_GPIO_Init+0x2b8>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000990:	4a48      	ldr	r2, [pc, #288]	@ (8000ab4 <HAL_GPIO_Init+0x2bc>)
 8000992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000994:	089b      	lsrs	r3, r3, #2
 8000996:	3302      	adds	r3, #2
 8000998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a40      	ldr	r2, [pc, #256]	@ (8000ab8 <HAL_GPIO_Init+0x2c0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d013      	beq.n	80009e4 <HAL_GPIO_Init+0x1ec>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a3f      	ldr	r2, [pc, #252]	@ (8000abc <HAL_GPIO_Init+0x2c4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d00d      	beq.n	80009e0 <HAL_GPIO_Init+0x1e8>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ac0 <HAL_GPIO_Init+0x2c8>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d007      	beq.n	80009dc <HAL_GPIO_Init+0x1e4>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a3d      	ldr	r2, [pc, #244]	@ (8000ac4 <HAL_GPIO_Init+0x2cc>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d101      	bne.n	80009d8 <HAL_GPIO_Init+0x1e0>
 80009d4:	2303      	movs	r3, #3
 80009d6:	e006      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009d8:	2304      	movs	r3, #4
 80009da:	e004      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009dc:	2302      	movs	r3, #2
 80009de:	e002      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009e0:	2301      	movs	r3, #1
 80009e2:	e000      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009e4:	2300      	movs	r3, #0
 80009e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009e8:	f002 0203 	and.w	r2, r2, #3
 80009ec:	0092      	lsls	r2, r2, #2
 80009ee:	4093      	lsls	r3, r2
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009f6:	492f      	ldr	r1, [pc, #188]	@ (8000ab4 <HAL_GPIO_Init+0x2bc>)
 80009f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	3302      	adds	r3, #2
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d006      	beq.n	8000a1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a10:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a12:	689a      	ldr	r2, [r3, #8]
 8000a14:	492c      	ldr	r1, [pc, #176]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	608b      	str	r3, [r1, #8]
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	4928      	ldr	r1, [pc, #160]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a28:	4013      	ands	r3, r2
 8000a2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a38:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	4922      	ldr	r1, [pc, #136]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60cb      	str	r3, [r1, #12]
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a48:	68da      	ldr	r2, [r3, #12]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	491e      	ldr	r1, [pc, #120]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a60:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a62:	685a      	ldr	r2, [r3, #4]
 8000a64:	4918      	ldr	r1, [pc, #96]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	604b      	str	r3, [r1, #4]
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	4914      	ldr	r1, [pc, #80]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d021      	beq.n	8000acc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	490e      	ldr	r1, [pc, #56]	@ (8000ac8 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	600b      	str	r3, [r1, #0]
 8000a94:	e021      	b.n	8000ada <HAL_GPIO_Init+0x2e2>
 8000a96:	bf00      	nop
 8000a98:	10320000 	.word	0x10320000
 8000a9c:	10310000 	.word	0x10310000
 8000aa0:	10220000 	.word	0x10220000
 8000aa4:	10210000 	.word	0x10210000
 8000aa8:	10120000 	.word	0x10120000
 8000aac:	10110000 	.word	0x10110000
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010000 	.word	0x40010000
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	40011000 	.word	0x40011000
 8000ac4:	40011400 	.word	0x40011400
 8000ac8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000acc:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <HAL_GPIO_Init+0x304>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4909      	ldr	r1, [pc, #36]	@ (8000afc <HAL_GPIO_Init+0x304>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	3301      	adds	r3, #1
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f47f ae8e 	bne.w	800080c <HAL_GPIO_Init+0x14>
  }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	372c      	adds	r7, #44	@ 0x2c
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	40010400 	.word	0x40010400

08000b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b10:	787b      	ldrb	r3, [r7, #1]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b16:	887a      	ldrh	r2, [r7, #2]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b1c:	e003      	b.n	8000b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b1e:	887b      	ldrh	r3, [r7, #2]
 8000b20:	041a      	lsls	r2, r3, #16
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	611a      	str	r2, [r3, #16]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e272      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 8087 	beq.w	8000c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b50:	4b92      	ldr	r3, [pc, #584]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 030c 	and.w	r3, r3, #12
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	d00c      	beq.n	8000b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b5c:	4b8f      	ldr	r3, [pc, #572]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 030c 	and.w	r3, r3, #12
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d112      	bne.n	8000b8e <HAL_RCC_OscConfig+0x5e>
 8000b68:	4b8c      	ldr	r3, [pc, #560]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b74:	d10b      	bne.n	8000b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b76:	4b89      	ldr	r3, [pc, #548]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d06c      	beq.n	8000c5c <HAL_RCC_OscConfig+0x12c>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d168      	bne.n	8000c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e24c      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b96:	d106      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x76>
 8000b98:	4b80      	ldr	r3, [pc, #512]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a7f      	ldr	r2, [pc, #508]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	e02e      	b.n	8000c04 <HAL_RCC_OscConfig+0xd4>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10c      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x98>
 8000bae:	4b7b      	ldr	r3, [pc, #492]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a7a      	ldr	r2, [pc, #488]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	4b78      	ldr	r3, [pc, #480]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a77      	ldr	r2, [pc, #476]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e01d      	b.n	8000c04 <HAL_RCC_OscConfig+0xd4>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000bd0:	d10c      	bne.n	8000bec <HAL_RCC_OscConfig+0xbc>
 8000bd2:	4b72      	ldr	r3, [pc, #456]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a71      	ldr	r2, [pc, #452]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	4b6f      	ldr	r3, [pc, #444]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a6e      	ldr	r2, [pc, #440]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e00b      	b.n	8000c04 <HAL_RCC_OscConfig+0xd4>
 8000bec:	4b6b      	ldr	r3, [pc, #428]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b68      	ldr	r3, [pc, #416]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a67      	ldr	r2, [pc, #412]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d013      	beq.n	8000c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fd06 	bl	800061c <HAL_GetTick>
 8000c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c12:	e008      	b.n	8000c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c14:	f7ff fd02 	bl	800061c <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b64      	cmp	r3, #100	@ 0x64
 8000c20:	d901      	bls.n	8000c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e200      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c26:	4b5d      	ldr	r3, [pc, #372]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f0      	beq.n	8000c14 <HAL_RCC_OscConfig+0xe4>
 8000c32:	e014      	b.n	8000c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fcf2 	bl	800061c <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c3c:	f7ff fcee 	bl	800061c <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b64      	cmp	r3, #100	@ 0x64
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e1ec      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4e:	4b53      	ldr	r3, [pc, #332]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f0      	bne.n	8000c3c <HAL_RCC_OscConfig+0x10c>
 8000c5a:	e000      	b.n	8000c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d063      	beq.n	8000d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 030c 	and.w	r3, r3, #12
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00b      	beq.n	8000c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c76:	4b49      	ldr	r3, [pc, #292]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 030c 	and.w	r3, r3, #12
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d11c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x18c>
 8000c82:	4b46      	ldr	r3, [pc, #280]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d116      	bne.n	8000cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8e:	4b43      	ldr	r3, [pc, #268]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x176>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d001      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e1c0      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	4939      	ldr	r1, [pc, #228]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cba:	e03a      	b.n	8000d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d020      	beq.n	8000d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc4:	4b36      	ldr	r3, [pc, #216]	@ (8000da0 <HAL_RCC_OscConfig+0x270>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cca:	f7ff fca7 	bl	800061c <HAL_GetTick>
 8000cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd0:	e008      	b.n	8000ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fca3 	bl	800061c <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d901      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e1a1      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f0      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4927      	ldr	r1, [pc, #156]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000d00:	4313      	orrs	r3, r2
 8000d02:	600b      	str	r3, [r1, #0]
 8000d04:	e015      	b.n	8000d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d06:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <HAL_RCC_OscConfig+0x270>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fc86 	bl	800061c <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d14:	f7ff fc82 	bl	800061c <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e180      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d26:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f0      	bne.n	8000d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d03a      	beq.n	8000db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d019      	beq.n	8000d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <HAL_RCC_OscConfig+0x274>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d4c:	f7ff fc66 	bl	800061c <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d54:	f7ff fc62 	bl	800061c <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e160      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f000 fa9c 	bl	80012b0 <RCC_Delay>
 8000d78:	e01c      	b.n	8000db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_RCC_OscConfig+0x274>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d80:	f7ff fc4c 	bl	800061c <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d86:	e00f      	b.n	8000da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d88:	f7ff fc48 	bl	800061c <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d908      	bls.n	8000da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e146      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	42420000 	.word	0x42420000
 8000da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da8:	4b92      	ldr	r3, [pc, #584]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1e9      	bne.n	8000d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80a6 	beq.w	8000f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc6:	4b8b      	ldr	r3, [pc, #556]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10d      	bne.n	8000dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b88      	ldr	r3, [pc, #544]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a87      	ldr	r2, [pc, #540]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b85      	ldr	r3, [pc, #532]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dea:	2301      	movs	r3, #1
 8000dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dee:	4b82      	ldr	r3, [pc, #520]	@ (8000ff8 <HAL_RCC_OscConfig+0x4c8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d118      	bne.n	8000e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8000ff8 <HAL_RCC_OscConfig+0x4c8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a7e      	ldr	r2, [pc, #504]	@ (8000ff8 <HAL_RCC_OscConfig+0x4c8>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e06:	f7ff fc09 	bl	800061c <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e0e:	f7ff fc05 	bl	800061c <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b64      	cmp	r3, #100	@ 0x64
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e103      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e20:	4b75      	ldr	r3, [pc, #468]	@ (8000ff8 <HAL_RCC_OscConfig+0x4c8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <HAL_RCC_OscConfig+0x312>
 8000e34:	4b6f      	ldr	r3, [pc, #444]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a6e      	ldr	r2, [pc, #440]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6213      	str	r3, [r2, #32]
 8000e40:	e02d      	b.n	8000e9e <HAL_RCC_OscConfig+0x36e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x334>
 8000e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
 8000e4e:	4a69      	ldr	r2, [pc, #420]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e50:	f023 0301 	bic.w	r3, r3, #1
 8000e54:	6213      	str	r3, [r2, #32]
 8000e56:	4b67      	ldr	r3, [pc, #412]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4a66      	ldr	r2, [pc, #408]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	6213      	str	r3, [r2, #32]
 8000e62:	e01c      	b.n	8000e9e <HAL_RCC_OscConfig+0x36e>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d10c      	bne.n	8000e86 <HAL_RCC_OscConfig+0x356>
 8000e6c:	4b61      	ldr	r3, [pc, #388]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4a60      	ldr	r2, [pc, #384]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6213      	str	r3, [r2, #32]
 8000e78:	4b5e      	ldr	r3, [pc, #376]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6213      	str	r3, [r2, #32]
 8000e84:	e00b      	b.n	8000e9e <HAL_RCC_OscConfig+0x36e>
 8000e86:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	6213      	str	r3, [r2, #32]
 8000e92:	4b58      	ldr	r3, [pc, #352]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	4a57      	ldr	r2, [pc, #348]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	f023 0304 	bic.w	r3, r3, #4
 8000e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d015      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fbb9 	bl	800061c <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eae:	f7ff fbb5 	bl	800061c <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e0b1      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0ee      	beq.n	8000eae <HAL_RCC_OscConfig+0x37e>
 8000ed0:	e014      	b.n	8000efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fba3 	bl	800061c <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed8:	e00a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fb9f 	bl	800061c <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e09b      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef0:	4b40      	ldr	r3, [pc, #256]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1ee      	bne.n	8000eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d105      	bne.n	8000f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f02:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a3b      	ldr	r2, [pc, #236]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8087 	beq.w	8001026 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f18:	4b36      	ldr	r3, [pc, #216]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d061      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d146      	bne.n	8000fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f2c:	4b33      	ldr	r3, [pc, #204]	@ (8000ffc <HAL_RCC_OscConfig+0x4cc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f32:	f7ff fb73 	bl	800061c <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f3a:	f7ff fb6f 	bl	800061c <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e06d      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f0      	bne.n	8000f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f60:	d108      	bne.n	8000f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f62:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	4921      	ldr	r1, [pc, #132]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a19      	ldr	r1, [r3, #32]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f84:	430b      	orrs	r3, r1
 8000f86:	491b      	ldr	r1, [pc, #108]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <HAL_RCC_OscConfig+0x4cc>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f92:	f7ff fb43 	bl	800061c <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff fb3f 	bl	800061c <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e03d      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f0      	beq.n	8000f9a <HAL_RCC_OscConfig+0x46a>
 8000fb8:	e035      	b.n	8001026 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <HAL_RCC_OscConfig+0x4cc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fb2c 	bl	800061c <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc8:	f7ff fb28 	bl	800061c <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e026      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x498>
 8000fe6:	e01e      	b.n	8001026 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d107      	bne.n	8001000 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e019      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40007000 	.word	0x40007000
 8000ffc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_RCC_OscConfig+0x500>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	429a      	cmp	r2, r3
 8001012:	d106      	bne.n	8001022 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800101e:	429a      	cmp	r2, r3
 8001020:	d001      	beq.n	8001026 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0d0      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001048:	4b6a      	ldr	r3, [pc, #424]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d910      	bls.n	8001078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	4b67      	ldr	r3, [pc, #412]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 0207 	bic.w	r2, r3, #7
 800105e:	4965      	ldr	r1, [pc, #404]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	4313      	orrs	r3, r2
 8001064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001066:	4b63      	ldr	r3, [pc, #396]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d001      	beq.n	8001078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e0b8      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d020      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001090:	4b59      	ldr	r3, [pc, #356]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a58      	ldr	r2, [pc, #352]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001096:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800109a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a8:	4b53      	ldr	r3, [pc, #332]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4a52      	ldr	r2, [pc, #328]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80010b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b4:	4b50      	ldr	r3, [pc, #320]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	494d      	ldr	r1, [pc, #308]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d040      	beq.n	8001154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d107      	bne.n	80010ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4b47      	ldr	r3, [pc, #284]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d115      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e07f      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d107      	bne.n	8001102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f2:	4b41      	ldr	r3, [pc, #260]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d109      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e073      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001102:	4b3d      	ldr	r3, [pc, #244]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e06b      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001112:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f023 0203 	bic.w	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4936      	ldr	r1, [pc, #216]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001124:	f7ff fa7a 	bl	800061c <HAL_GetTick>
 8001128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112a:	e00a      	b.n	8001142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112c:	f7ff fa76 	bl	800061c <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800113a:	4293      	cmp	r3, r2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e053      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001142:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 020c 	and.w	r2, r3, #12
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	429a      	cmp	r2, r3
 8001152:	d1eb      	bne.n	800112c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001154:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d210      	bcs.n	8001184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001162:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 0207 	bic.w	r2, r3, #7
 800116a:	4922      	ldr	r1, [pc, #136]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d001      	beq.n	8001184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e032      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d008      	beq.n	80011a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001190:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4916      	ldr	r1, [pc, #88]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	490e      	ldr	r1, [pc, #56]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011c2:	f000 f821 	bl	8001208 <HAL_RCC_GetSysClockFreq>
 80011c6:	4602      	mov	r2, r0
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	490a      	ldr	r1, [pc, #40]	@ (80011fc <HAL_RCC_ClockConfig+0x1c8>)
 80011d4:	5ccb      	ldrb	r3, [r1, r3]
 80011d6:	fa22 f303 	lsr.w	r3, r2, r3
 80011da:	4a09      	ldr	r2, [pc, #36]	@ (8001200 <HAL_RCC_ClockConfig+0x1cc>)
 80011dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_RCC_ClockConfig+0x1d0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9d8 	bl	8000598 <HAL_InitTick>

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40022000 	.word	0x40022000
 80011f8:	40021000 	.word	0x40021000
 80011fc:	080049d4 	.word	0x080049d4
 8001200:	20000004 	.word	0x20000004
 8001204:	20000008 	.word	0x20000008

08001208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001222:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <HAL_RCC_GetSysClockFreq+0x94>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b04      	cmp	r3, #4
 8001230:	d002      	beq.n	8001238 <HAL_RCC_GetSysClockFreq+0x30>
 8001232:	2b08      	cmp	r3, #8
 8001234:	d003      	beq.n	800123e <HAL_RCC_GetSysClockFreq+0x36>
 8001236:	e027      	b.n	8001288 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001238:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800123a:	613b      	str	r3, [r7, #16]
      break;
 800123c:	e027      	b.n	800128e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	0c9b      	lsrs	r3, r3, #18
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	4a17      	ldr	r2, [pc, #92]	@ (80012a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d010      	beq.n	8001278 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <HAL_RCC_GetSysClockFreq+0x94>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	0c5b      	lsrs	r3, r3, #17
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	4a11      	ldr	r2, [pc, #68]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001262:	5cd3      	ldrb	r3, [r2, r3]
 8001264:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800126a:	fb03 f202 	mul.w	r2, r3, r2
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	fbb2 f3f3 	udiv	r3, r2, r3
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e004      	b.n	8001282 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a0c      	ldr	r2, [pc, #48]	@ (80012ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800127c:	fb02 f303 	mul.w	r3, r2, r3
 8001280:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	613b      	str	r3, [r7, #16]
      break;
 8001286:	e002      	b.n	800128e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800128a:	613b      	str	r3, [r7, #16]
      break;
 800128c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800128e:	693b      	ldr	r3, [r7, #16]
}
 8001290:	4618      	mov	r0, r3
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	007a1200 	.word	0x007a1200
 80012a4:	080049e4 	.word	0x080049e4
 80012a8:	080049f4 	.word	0x080049f4
 80012ac:	003d0900 	.word	0x003d0900

080012b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012b8:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <RCC_Delay+0x34>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <RCC_Delay+0x38>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	0a5b      	lsrs	r3, r3, #9
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012cc:	bf00      	nop
  }
  while (Delay --);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1e5a      	subs	r2, r3, #1
 80012d2:	60fa      	str	r2, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f9      	bne.n	80012cc <RCC_Delay+0x1c>
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20000004 	.word	0x20000004
 80012e8:	10624dd3 	.word	0x10624dd3

080012ec <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012f2:	f3ef 8305 	mrs	r3, IPSR
 80012f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80012f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10f      	bne.n	800131e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001302:	607b      	str	r3, [r7, #4]
  return(result);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <osKernelInitialize+0x32>
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <osKernelInitialize+0x60>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d109      	bne.n	8001326 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001312:	f3ef 8311 	mrs	r3, BASEPRI
 8001316:	603b      	str	r3, [r7, #0]
  return(result);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800131e:	f06f 0305 	mvn.w	r3, #5
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e00c      	b.n	8001340 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <osKernelInitialize+0x60>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d105      	bne.n	800133a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <osKernelInitialize+0x60>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	e002      	b.n	8001340 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001340:	68fb      	ldr	r3, [r7, #12]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	20000048 	.word	0x20000048

08001350 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001356:	f3ef 8305 	mrs	r3, IPSR
 800135a:	60bb      	str	r3, [r7, #8]
  return(result);
 800135c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001362:	f3ef 8310 	mrs	r3, PRIMASK
 8001366:	607b      	str	r3, [r7, #4]
  return(result);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <osKernelStart+0x32>
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <osKernelStart+0x64>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d109      	bne.n	800138a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001376:	f3ef 8311 	mrs	r3, BASEPRI
 800137a:	603b      	str	r3, [r7, #0]
  return(result);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001382:	f06f 0305 	mvn.w	r3, #5
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e00e      	b.n	80013a8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <osKernelStart+0x64>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d107      	bne.n	80013a2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <osKernelStart+0x64>)
 8001394:	2202      	movs	r2, #2
 8001396:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001398:	f001 fd1e 	bl	8002dd8 <vTaskStartScheduler>
      stat = osOK;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e002      	b.n	80013a8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80013a8:	68fb      	ldr	r3, [r7, #12]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000048 	.word	0x20000048

080013b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b092      	sub	sp, #72	@ 0x48
 80013bc:	af04      	add	r7, sp, #16
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013c8:	f3ef 8305 	mrs	r3, IPSR
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f040 8094 	bne.w	80014fe <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013d6:	f3ef 8310 	mrs	r3, PRIMASK
 80013da:	623b      	str	r3, [r7, #32]
  return(result);
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 808d 	bne.w	80014fe <osThreadNew+0x146>
 80013e4:	4b48      	ldr	r3, [pc, #288]	@ (8001508 <osThreadNew+0x150>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d106      	bne.n	80013fa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80013ec:	f3ef 8311 	mrs	r3, BASEPRI
 80013f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f040 8082 	bne.w	80014fe <osThreadNew+0x146>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d07e      	beq.n	80014fe <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001404:	2318      	movs	r3, #24
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8001408:	2300      	movs	r3, #0
 800140a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800140c:	f107 031b 	add.w	r3, r7, #27
 8001410:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d045      	beq.n	80014aa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <osThreadNew+0x74>
        name = attr->name;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800143a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <osThreadNew+0x9a>
 8001440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001442:	2b38      	cmp	r3, #56	@ 0x38
 8001444:	d805      	bhi.n	8001452 <osThreadNew+0x9a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <osThreadNew+0x9e>
        return (NULL);
 8001452:	2300      	movs	r3, #0
 8001454:	e054      	b.n	8001500 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00e      	beq.n	800148c <osThreadNew+0xd4>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b5b      	cmp	r3, #91	@ 0x5b
 8001474:	d90a      	bls.n	800148c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <osThreadNew+0xd4>
        mem = 1;
 8001486:	2301      	movs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800148a:	e010      	b.n	80014ae <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10c      	bne.n	80014ae <osThreadNew+0xf6>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d108      	bne.n	80014ae <osThreadNew+0xf6>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d104      	bne.n	80014ae <osThreadNew+0xf6>
          mem = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014a8:	e001      	b.n	80014ae <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80014ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d110      	bne.n	80014d6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80014bc:	9202      	str	r2, [sp, #8]
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f001 fab2 	bl	8002a34 <xTaskCreateStatic>
 80014d0:	4603      	mov	r3, r0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e013      	b.n	80014fe <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80014d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d110      	bne.n	80014fe <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80014dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014de:	b29a      	uxth	r2, r3
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f001 faff 	bl	8002af2 <xTaskCreate>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d001      	beq.n	80014fe <osThreadNew+0x146>
          hTask = NULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80014fe:	697b      	ldr	r3, [r7, #20]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3738      	adds	r7, #56	@ 0x38
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000048 	.word	0x20000048

0800150c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001514:	f3ef 8305 	mrs	r3, IPSR
 8001518:	613b      	str	r3, [r7, #16]
  return(result);
 800151a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10f      	bne.n	8001540 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001520:	f3ef 8310 	mrs	r3, PRIMASK
 8001524:	60fb      	str	r3, [r7, #12]
  return(result);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <osDelay+0x34>
 800152c:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <osDelay+0x58>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d109      	bne.n	8001548 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001534:	f3ef 8311 	mrs	r3, BASEPRI
 8001538:	60bb      	str	r3, [r7, #8]
  return(result);
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <osDelay+0x3c>
    stat = osErrorISR;
 8001540:	f06f 0305 	mvn.w	r3, #5
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e007      	b.n	8001558 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f001 fc0a 	bl	8002d6c <vTaskDelay>
    }
  }

  return (stat);
 8001558:	697b      	ldr	r3, [r7, #20]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000048 	.word	0x20000048

08001568 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	@ 0x30
 800156c:	af02      	add	r7, sp, #8
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001578:	f3ef 8305 	mrs	r3, IPSR
 800157c:	61bb      	str	r3, [r7, #24]
  return(result);
 800157e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001580:	2b00      	cmp	r3, #0
 8001582:	f040 8086 	bne.w	8001692 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001586:	f3ef 8310 	mrs	r3, PRIMASK
 800158a:	617b      	str	r3, [r7, #20]
  return(result);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d17f      	bne.n	8001692 <osSemaphoreNew+0x12a>
 8001592:	4b42      	ldr	r3, [pc, #264]	@ (800169c <osSemaphoreNew+0x134>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d105      	bne.n	80015a6 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800159a:	f3ef 8311 	mrs	r3, BASEPRI
 800159e:	613b      	str	r3, [r7, #16]
  return(result);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d175      	bne.n	8001692 <osSemaphoreNew+0x12a>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d072      	beq.n	8001692 <osSemaphoreNew+0x12a>
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d86e      	bhi.n	8001692 <osSemaphoreNew+0x12a>
    mem = -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d015      	beq.n	80015ec <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <osSemaphoreNew+0x6e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b4f      	cmp	r3, #79	@ 0x4f
 80015ce:	d902      	bls.n	80015d6 <osSemaphoreNew+0x6e>
        mem = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	623b      	str	r3, [r7, #32]
 80015d4:	e00c      	b.n	80015f0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d108      	bne.n	80015f0 <osSemaphoreNew+0x88>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d104      	bne.n	80015f0 <osSemaphoreNew+0x88>
          mem = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
 80015ea:	e001      	b.n	80015f0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f6:	d04c      	beq.n	8001692 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d128      	bne.n	8001650 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10a      	bne.n	800161a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2203      	movs	r2, #3
 800160a:	9200      	str	r2, [sp, #0]
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2001      	movs	r0, #1
 8001612:	f000 fa4f 	bl	8001ab4 <xQueueGenericCreateStatic>
 8001616:	6278      	str	r0, [r7, #36]	@ 0x24
 8001618:	e005      	b.n	8001626 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800161a:	2203      	movs	r2, #3
 800161c:	2100      	movs	r1, #0
 800161e:	2001      	movs	r0, #1
 8001620:	f000 fac4 	bl	8001bac <xQueueGenericCreate>
 8001624:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	2b00      	cmp	r3, #0
 800162a:	d022      	beq.n	8001672 <osSemaphoreNew+0x10a>
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d01f      	beq.n	8001672 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001632:	2300      	movs	r3, #0
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800163a:	f000 fb87 	bl	8001d4c <xQueueGenericSend>
 800163e:	4603      	mov	r3, r0
 8001640:	2b01      	cmp	r3, #1
 8001642:	d016      	beq.n	8001672 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8001644:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001646:	f001 f823 	bl	8002690 <vQueueDelete>
            hSemaphore = NULL;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
 800164e:	e010      	b.n	8001672 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d108      	bne.n	8001668 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	461a      	mov	r2, r3
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 fb06 	bl	8001c70 <xQueueCreateCountingSemaphoreStatic>
 8001664:	6278      	str	r0, [r7, #36]	@ 0x24
 8001666:	e004      	b.n	8001672 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 fb39 	bl	8001ce2 <xQueueCreateCountingSemaphore>
 8001670:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00c      	beq.n	8001692 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <osSemaphoreNew+0x11e>
          name = attr->name;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	e001      	b.n	800168a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800168a:	69f9      	ldr	r1, [r7, #28]
 800168c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800168e:	f001 f94b 	bl	8002928 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001694:	4618      	mov	r0, r3
 8001696:	3728      	adds	r7, #40	@ 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000048 	.word	0x20000048

080016a0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80016b8:	f06f 0303 	mvn.w	r3, #3
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	e04b      	b.n	8001758 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016c0:	f3ef 8305 	mrs	r3, IPSR
 80016c4:	617b      	str	r3, [r7, #20]
  return(result);
 80016c6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10f      	bne.n	80016ec <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016cc:	f3ef 8310 	mrs	r3, PRIMASK
 80016d0:	613b      	str	r3, [r7, #16]
  return(result);
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <osSemaphoreAcquire+0x4c>
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <osSemaphoreAcquire+0xc4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d128      	bne.n	8001732 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80016e0:	f3ef 8311 	mrs	r3, BASEPRI
 80016e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d022      	beq.n	8001732 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80016f2:	f06f 0303 	mvn.w	r3, #3
 80016f6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80016f8:	e02d      	b.n	8001756 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	461a      	mov	r2, r3
 8001704:	2100      	movs	r1, #0
 8001706:	69b8      	ldr	r0, [r7, #24]
 8001708:	f000 ff40 	bl	800258c <xQueueReceiveFromISR>
 800170c:	4603      	mov	r3, r0
 800170e:	2b01      	cmp	r3, #1
 8001710:	d003      	beq.n	800171a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8001712:	f06f 0302 	mvn.w	r3, #2
 8001716:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001718:	e01d      	b.n	8001756 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01a      	beq.n	8001756 <osSemaphoreAcquire+0xb6>
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <osSemaphoreAcquire+0xc8>)
 8001722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	f3bf 8f4f 	dsb	sy
 800172c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8001730:	e011      	b.n	8001756 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8001732:	6839      	ldr	r1, [r7, #0]
 8001734:	69b8      	ldr	r0, [r7, #24]
 8001736:	f000 fe19 	bl	800236c <xQueueSemaphoreTake>
 800173a:	4603      	mov	r3, r0
 800173c:	2b01      	cmp	r3, #1
 800173e:	d00b      	beq.n	8001758 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8001746:	f06f 0301 	mvn.w	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	e004      	b.n	8001758 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800174e:	f06f 0302 	mvn.w	r3, #2
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	e000      	b.n	8001758 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8001756:	bf00      	nop
      }
    }
  }

  return (stat);
 8001758:	69fb      	ldr	r3, [r7, #28]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000048 	.word	0x20000048
 8001768:	e000ed04 	.word	0xe000ed04

0800176c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d103      	bne.n	800178a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8001782:	f06f 0303 	mvn.w	r3, #3
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	e03e      	b.n	8001808 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800178a:	f3ef 8305 	mrs	r3, IPSR
 800178e:	617b      	str	r3, [r7, #20]
  return(result);
 8001790:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001796:	f3ef 8310 	mrs	r3, PRIMASK
 800179a:	613b      	str	r3, [r7, #16]
  return(result);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <osSemaphoreRelease+0x4a>
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <osSemaphoreRelease+0xa8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d120      	bne.n	80017ec <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017aa:	f3ef 8311 	mrs	r3, BASEPRI
 80017ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d01a      	beq.n	80017ec <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4619      	mov	r1, r3
 80017c0:	69b8      	ldr	r0, [r7, #24]
 80017c2:	f000 fc60 	bl	8002086 <xQueueGiveFromISR>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d003      	beq.n	80017d4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80017cc:	f06f 0302 	mvn.w	r3, #2
 80017d0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80017d2:	e018      	b.n	8001806 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d015      	beq.n	8001806 <osSemaphoreRelease+0x9a>
 80017da:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <osSemaphoreRelease+0xac>)
 80017dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f3bf 8f4f 	dsb	sy
 80017e6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80017ea:	e00c      	b.n	8001806 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80017ec:	2300      	movs	r3, #0
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	69b8      	ldr	r0, [r7, #24]
 80017f4:	f000 faaa 	bl	8001d4c <xQueueGenericSend>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d004      	beq.n	8001808 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80017fe:	f06f 0302 	mvn.w	r3, #2
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	e000      	b.n	8001808 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001806:	bf00      	nop
    }
  }

  return (stat);
 8001808:	69fb      	ldr	r3, [r7, #28]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000048 	.word	0x20000048
 8001818:	e000ed04 	.word	0xe000ed04

0800181c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a06      	ldr	r2, [pc, #24]	@ (8001844 <vApplicationGetIdleTaskMemory+0x28>)
 800182c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <vApplicationGetIdleTaskMemory+0x2c>)
 8001832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2280      	movs	r2, #128	@ 0x80
 8001838:	601a      	str	r2, [r3, #0]
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	2000004c 	.word	0x2000004c
 8001848:	200000a8 	.word	0x200000a8

0800184c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <vApplicationGetTimerTaskMemory+0x2c>)
 800185c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	4a06      	ldr	r2, [pc, #24]	@ (800187c <vApplicationGetTimerTaskMemory+0x30>)
 8001862:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800186a:	601a      	str	r2, [r3, #0]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	200002a8 	.word	0x200002a8
 800187c:	20000304 	.word	0x20000304

08001880 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f103 0208 	add.w	r2, r3, #8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f103 0208 	add.w	r2, r3, #8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f103 0208 	add.w	r2, r3, #8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001932:	d103      	bne.n	800193c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e00c      	b.n	8001956 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3308      	adds	r3, #8
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e002      	b.n	800194a <vListInsert+0x2e>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	429a      	cmp	r2, r3
 8001954:	d2f6      	bcs.n	8001944 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	601a      	str	r2, [r3, #0]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6892      	ldr	r2, [r2, #8]
 80019a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6852      	ldr	r2, [r2, #4]
 80019ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d103      	bne.n	80019c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	1e5a      	subs	r2, r3, #1
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10b      	bne.n	8001a0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
 8001a04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001a06:	bf00      	nop
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001a0c:	f002 fc36 	bl	800427c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	441a      	add	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	68f9      	ldr	r1, [r7, #12]
 8001a40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	441a      	add	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	22ff      	movs	r2, #255	@ 0xff
 8001a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	22ff      	movs	r2, #255	@ 0xff
 8001a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d114      	bne.n	8001a8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01a      	beq.n	8001aa0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3310      	adds	r3, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 fc44 	bl	80032fc <xTaskRemoveFromEventList>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d012      	beq.n	8001aa0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <xQueueGenericReset+0xd0>)
 8001a7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	e009      	b.n	8001aa0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3310      	adds	r3, #16
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fef5 	bl	8001880 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3324      	adds	r3, #36	@ 0x24
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fef0 	bl	8001880 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001aa0:	f002 fc1c 	bl	80042dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000ed04 	.word	0xe000ed04

08001ab4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	@ 0x38
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10b      	bne.n	8001ae0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001acc:	f383 8811 	msr	BASEPRI, r3
 8001ad0:	f3bf 8f6f 	isb	sy
 8001ad4:	f3bf 8f4f 	dsb	sy
 8001ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10b      	bne.n	8001afe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aea:	f383 8811 	msr	BASEPRI, r3
 8001aee:	f3bf 8f6f 	isb	sy
 8001af2:	f3bf 8f4f 	dsb	sy
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	e7fd      	b.n	8001afa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <xQueueGenericCreateStatic+0x56>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <xQueueGenericCreateStatic+0x5a>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <xQueueGenericCreateStatic+0x5c>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10b      	bne.n	8001b2c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b18:	f383 8811 	msr	BASEPRI, r3
 8001b1c:	f3bf 8f6f 	isb	sy
 8001b20:	f3bf 8f4f 	dsb	sy
 8001b24:	623b      	str	r3, [r7, #32]
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <xQueueGenericCreateStatic+0x84>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <xQueueGenericCreateStatic+0x88>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <xQueueGenericCreateStatic+0x8a>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b46:	f383 8811 	msr	BASEPRI, r3
 8001b4a:	f3bf 8f6f 	isb	sy
 8001b4e:	f3bf 8f4f 	dsb	sy
 8001b52:	61fb      	str	r3, [r7, #28]
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	e7fd      	b.n	8001b56 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001b5a:	2350      	movs	r3, #80	@ 0x50
 8001b5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2b50      	cmp	r3, #80	@ 0x50
 8001b62:	d00b      	beq.n	8001b7c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b68:	f383 8811 	msr	BASEPRI, r3
 8001b6c:	f3bf 8f6f 	isb	sy
 8001b70:	f3bf 8f4f 	dsb	sy
 8001b74:	61bb      	str	r3, [r7, #24]
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b8e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f844 	bl	8001c2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3730      	adds	r7, #48	@ 0x30
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	@ 0x28
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10b      	bne.n	8001bd8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8001bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bc4:	f383 8811 	msr	BASEPRI, r3
 8001bc8:	f3bf 8f6f 	isb	sy
 8001bcc:	f3bf 8f4f 	dsb	sy
 8001bd0:	613b      	str	r3, [r7, #16]
}
 8001bd2:	bf00      	nop
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e004      	b.n	8001bee <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3350      	adds	r3, #80	@ 0x50
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fc44 	bl	8004480 <pvPortMalloc>
 8001bf8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00f      	beq.n	8001c20 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	3350      	adds	r3, #80	@ 0x50
 8001c04:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c0e:	79fa      	ldrb	r2, [r7, #7]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f805 	bl	8001c2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001c20:	69bb      	ldr	r3, [r7, #24]
	}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d103      	bne.n	8001c46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e002      	b.n	8001c4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c58:	2101      	movs	r1, #1
 8001c5a:	69b8      	ldr	r0, [r7, #24]
 8001c5c:	f7ff fec0 	bl	80019e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	78fa      	ldrb	r2, [r7, #3]
 8001c64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10b      	bne.n	8001c9a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8001c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	61bb      	str	r3, [r7, #24]
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	e7fd      	b.n	8001c96 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d90b      	bls.n	8001cba <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8001ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ca6:	f383 8811 	msr	BASEPRI, r3
 8001caa:	f3bf 8f6f 	isb	sy
 8001cae:	f3bf 8f4f 	dsb	sy
 8001cb2:	617b      	str	r3, [r7, #20]
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	e7fd      	b.n	8001cb6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001cba:	2302      	movs	r3, #2
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff fef5 	bl	8001ab4 <xQueueGenericCreateStatic>
 8001cca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
	}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10b      	bne.n	8001d0a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8001cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	613b      	str	r3, [r7, #16]
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	e7fd      	b.n	8001d06 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d90b      	bls.n	8001d2a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8001d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d16:	f383 8811 	msr	BASEPRI, r3
 8001d1a:	f3bf 8f6f 	isb	sy
 8001d1e:	f3bf 8f4f 	dsb	sy
 8001d22:	60fb      	str	r3, [r7, #12]
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	e7fd      	b.n	8001d26 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ff3c 	bl	8001bac <xQueueGenericCreate>
 8001d34:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001d42:	697b      	ldr	r3, [r7, #20]
	}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08e      	sub	sp, #56	@ 0x38
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10b      	bne.n	8001d80 <xQueueGenericSend+0x34>
	__asm volatile
 8001d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d6c:	f383 8811 	msr	BASEPRI, r3
 8001d70:	f3bf 8f6f 	isb	sy
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d103      	bne.n	8001d8e <xQueueGenericSend+0x42>
 8001d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <xQueueGenericSend+0x46>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <xQueueGenericSend+0x48>
 8001d92:	2300      	movs	r3, #0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10b      	bne.n	8001db0 <xQueueGenericSend+0x64>
	__asm volatile
 8001d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d9c:	f383 8811 	msr	BASEPRI, r3
 8001da0:	f3bf 8f6f 	isb	sy
 8001da4:	f3bf 8f4f 	dsb	sy
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d103      	bne.n	8001dbe <xQueueGenericSend+0x72>
 8001db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <xQueueGenericSend+0x76>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <xQueueGenericSend+0x78>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10b      	bne.n	8001de0 <xQueueGenericSend+0x94>
	__asm volatile
 8001dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	623b      	str	r3, [r7, #32]
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001de0:	f001 fc50 	bl	8003684 <xTaskGetSchedulerState>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <xQueueGenericSend+0xa4>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <xQueueGenericSend+0xa8>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <xQueueGenericSend+0xaa>
 8001df4:	2300      	movs	r3, #0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10b      	bne.n	8001e12 <xQueueGenericSend+0xc6>
	__asm volatile
 8001dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dfe:	f383 8811 	msr	BASEPRI, r3
 8001e02:	f3bf 8f6f 	isb	sy
 8001e06:	f3bf 8f4f 	dsb	sy
 8001e0a:	61fb      	str	r3, [r7, #28]
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	e7fd      	b.n	8001e0e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e12:	f002 fa33 	bl	800427c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d302      	bcc.n	8001e28 <xQueueGenericSend+0xdc>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d129      	bne.n	8001e7c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e2e:	f000 fc6a 	bl	8002706 <prvCopyDataToQueue>
 8001e32:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3e:	3324      	adds	r3, #36	@ 0x24
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 fa5b 	bl	80032fc <xTaskRemoveFromEventList>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <xQueueGenericSend+0x200>)
 8001e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	f3bf 8f6f 	isb	sy
 8001e5c:	e00a      	b.n	8001e74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e64:	4b39      	ldr	r3, [pc, #228]	@ (8001f4c <xQueueGenericSend+0x200>)
 8001e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e74:	f002 fa32 	bl	80042dc <vPortExitCritical>
				return pdPASS;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e063      	b.n	8001f44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e82:	f002 fa2b 	bl	80042dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e05c      	b.n	8001f44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fa95 	bl	80033c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e9e:	f002 fa1d 	bl	80042dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ea2:	f001 f801 	bl	8002ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ea6:	f002 f9e9 	bl	800427c <vPortEnterCritical>
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb6:	d103      	bne.n	8001ec0 <xQueueGenericSend+0x174>
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ec6:	b25b      	sxtb	r3, r3
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d103      	bne.n	8001ed6 <xQueueGenericSend+0x18a>
 8001ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001ed6:	f002 fa01 	bl	80042dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001eda:	1d3a      	adds	r2, r7, #4
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fa84 	bl	80033f0 <xTaskCheckForTimeOut>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d124      	bne.n	8001f38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001eee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ef0:	f000 fd01 	bl	80028f6 <prvIsQueueFull>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d018      	beq.n	8001f2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efc:	3310      	adds	r3, #16
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f001 f9a8 	bl	8003258 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f0a:	f000 fc8c 	bl	8002826 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f0e:	f000 ffd9 	bl	8002ec4 <xTaskResumeAll>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f47f af7c 	bne.w	8001e12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <xQueueGenericSend+0x200>)
 8001f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	e772      	b.n	8001e12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f2e:	f000 fc7a 	bl	8002826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f32:	f000 ffc7 	bl	8002ec4 <xTaskResumeAll>
 8001f36:	e76c      	b.n	8001e12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f3a:	f000 fc74 	bl	8002826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f3e:	f000 ffc1 	bl	8002ec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f42:	2300      	movs	r3, #0
		}
	}
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3738      	adds	r7, #56	@ 0x38
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	e000ed04 	.word	0xe000ed04

08001f50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	@ 0x38
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10b      	bne.n	8001f80 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <xQueueGenericSendFromISR+0x3e>
 8001f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <xQueueGenericSendFromISR+0x42>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <xQueueGenericSendFromISR+0x44>
 8001f92:	2300      	movs	r3, #0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10b      	bne.n	8001fb0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f9c:	f383 8811 	msr	BASEPRI, r3
 8001fa0:	f3bf 8f6f 	isb	sy
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	623b      	str	r3, [r7, #32]
}
 8001faa:	bf00      	nop
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d103      	bne.n	8001fbe <xQueueGenericSendFromISR+0x6e>
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <xQueueGenericSendFromISR+0x72>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <xQueueGenericSendFromISR+0x74>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10b      	bne.n	8001fe0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	61fb      	str	r3, [r7, #28]
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fe0:	f002 fa0e 	bl	8004400 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001fe4:	f3ef 8211 	mrs	r2, BASEPRI
 8001fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fec:	f383 8811 	msr	BASEPRI, r3
 8001ff0:	f3bf 8f6f 	isb	sy
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	61ba      	str	r2, [r7, #24]
 8001ffa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	429a      	cmp	r2, r3
 800200a:	d302      	bcc.n	8002012 <xQueueGenericSendFromISR+0xc2>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d12c      	bne.n	800206c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002014:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002018:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002022:	f000 fb70 	bl	8002706 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002026:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202e:	d112      	bne.n	8002056 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203a:	3324      	adds	r3, #36	@ 0x24
 800203c:	4618      	mov	r0, r3
 800203e:	f001 f95d 	bl	80032fc <xTaskRemoveFromEventList>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e007      	b.n	8002066 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002056:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800205a:	3301      	adds	r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	b25a      	sxtb	r2, r3
 8002060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002066:	2301      	movs	r3, #1
 8002068:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800206a:	e001      	b.n	8002070 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800206c:	2300      	movs	r3, #0
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002072:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800207a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800207c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800207e:	4618      	mov	r0, r3
 8002080:	3738      	adds	r7, #56	@ 0x38
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b08e      	sub	sp, #56	@ 0x38
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800209a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800209e:	f383 8811 	msr	BASEPRI, r3
 80020a2:	f3bf 8f6f 	isb	sy
 80020a6:	f3bf 8f4f 	dsb	sy
 80020aa:	623b      	str	r3, [r7, #32]
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	e7fd      	b.n	80020ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80020b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80020ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020be:	f383 8811 	msr	BASEPRI, r3
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	61fb      	str	r3, [r7, #28]
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	e7fd      	b.n	80020ce <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80020d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <xQueueGiveFromISR+0x5c>
 80020da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <xQueueGiveFromISR+0x60>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <xQueueGiveFromISR+0x62>
 80020e6:	2300      	movs	r3, #0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10b      	bne.n	8002104 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	61bb      	str	r3, [r7, #24]
}
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002104:	f002 f97c 	bl	8004400 <vPortValidateInterruptPriority>
	__asm volatile
 8002108:	f3ef 8211 	mrs	r2, BASEPRI
 800210c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002110:	f383 8811 	msr	BASEPRI, r3
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	f3bf 8f4f 	dsb	sy
 800211c:	617a      	str	r2, [r7, #20]
 800211e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002120:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002128:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800212a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800212c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002130:	429a      	cmp	r2, r3
 8002132:	d22b      	bcs.n	800218c <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002136:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800213a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800213e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002144:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002146:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800214a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214e:	d112      	bne.n	8002176 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	2b00      	cmp	r3, #0
 8002156:	d016      	beq.n	8002186 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215a:	3324      	adds	r3, #36	@ 0x24
 800215c:	4618      	mov	r0, r3
 800215e:	f001 f8cd 	bl	80032fc <xTaskRemoveFromEventList>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00e      	beq.n	8002186 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e007      	b.n	8002186 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002176:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800217a:	3301      	adds	r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	b25a      	sxtb	r2, r3
 8002180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002186:	2301      	movs	r3, #1
 8002188:	637b      	str	r3, [r7, #52]	@ 0x34
 800218a:	e001      	b.n	8002190 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002192:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f383 8811 	msr	BASEPRI, r3
}
 800219a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800219c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3738      	adds	r7, #56	@ 0x38
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	@ 0x30
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80021bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10b      	bne.n	80021da <xQueueReceive+0x32>
	__asm volatile
 80021c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c6:	f383 8811 	msr	BASEPRI, r3
 80021ca:	f3bf 8f6f 	isb	sy
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	623b      	str	r3, [r7, #32]
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	e7fd      	b.n	80021d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <xQueueReceive+0x40>
 80021e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <xQueueReceive+0x44>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <xQueueReceive+0x46>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10b      	bne.n	800220a <xQueueReceive+0x62>
	__asm volatile
 80021f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	61fb      	str	r3, [r7, #28]
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	e7fd      	b.n	8002206 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800220a:	f001 fa3b 	bl	8003684 <xTaskGetSchedulerState>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <xQueueReceive+0x72>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <xQueueReceive+0x76>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <xQueueReceive+0x78>
 800221e:	2300      	movs	r3, #0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <xQueueReceive+0x94>
	__asm volatile
 8002224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	61bb      	str	r3, [r7, #24]
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800223c:	f002 f81e 	bl	800427c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01f      	beq.n	800228c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002250:	f000 fac3 	bl	80027da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	1e5a      	subs	r2, r3, #1
 8002258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800225c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00f      	beq.n	8002284 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002266:	3310      	adds	r3, #16
 8002268:	4618      	mov	r0, r3
 800226a:	f001 f847 	bl	80032fc <xTaskRemoveFromEventList>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002274:	4b3c      	ldr	r3, [pc, #240]	@ (8002368 <xQueueReceive+0x1c0>)
 8002276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002284:	f002 f82a 	bl	80042dc <vPortExitCritical>
				return pdPASS;
 8002288:	2301      	movs	r3, #1
 800228a:	e069      	b.n	8002360 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d103      	bne.n	800229a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002292:	f002 f823 	bl	80042dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002296:	2300      	movs	r3, #0
 8002298:	e062      	b.n	8002360 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800229a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 f88d 	bl	80033c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022ae:	f002 f815 	bl	80042dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022b2:	f000 fdf9 	bl	8002ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022b6:	f001 ffe1 	bl	800427c <vPortEnterCritical>
 80022ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c6:	d103      	bne.n	80022d0 <xQueueReceive+0x128>
 80022c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022d6:	b25b      	sxtb	r3, r3
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d103      	bne.n	80022e6 <xQueueReceive+0x13e>
 80022de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022e6:	f001 fff9 	bl	80042dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022ea:	1d3a      	adds	r2, r7, #4
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f001 f87c 	bl	80033f0 <xTaskCheckForTimeOut>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d123      	bne.n	8002346 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002300:	f000 fae3 	bl	80028ca <prvIsQueueEmpty>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d017      	beq.n	800233a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800230a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230c:	3324      	adds	r3, #36	@ 0x24
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f000 ffa0 	bl	8003258 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002318:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800231a:	f000 fa84 	bl	8002826 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800231e:	f000 fdd1 	bl	8002ec4 <xTaskResumeAll>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d189      	bne.n	800223c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002328:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <xQueueReceive+0x1c0>)
 800232a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	e780      	b.n	800223c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800233a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800233c:	f000 fa73 	bl	8002826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002340:	f000 fdc0 	bl	8002ec4 <xTaskResumeAll>
 8002344:	e77a      	b.n	800223c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002348:	f000 fa6d 	bl	8002826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800234c:	f000 fdba 	bl	8002ec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002352:	f000 faba 	bl	80028ca <prvIsQueueEmpty>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	f43f af6f 	beq.w	800223c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800235e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002360:	4618      	mov	r0, r3
 8002362:	3730      	adds	r7, #48	@ 0x30
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	e000ed04 	.word	0xe000ed04

0800236c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	@ 0x38
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002376:	2300      	movs	r3, #0
 8002378:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800237e:	2300      	movs	r3, #0
 8002380:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10b      	bne.n	80023a0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800238c:	f383 8811 	msr	BASEPRI, r3
 8002390:	f3bf 8f6f 	isb	sy
 8002394:	f3bf 8f4f 	dsb	sy
 8002398:	623b      	str	r3, [r7, #32]
}
 800239a:	bf00      	nop
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80023a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00b      	beq.n	80023c0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	61fb      	str	r3, [r7, #28]
}
 80023ba:	bf00      	nop
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023c0:	f001 f960 	bl	8003684 <xTaskGetSchedulerState>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <xQueueSemaphoreTake+0x64>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <xQueueSemaphoreTake+0x68>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <xQueueSemaphoreTake+0x6a>
 80023d4:	2300      	movs	r3, #0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10b      	bne.n	80023f2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80023da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	61bb      	str	r3, [r7, #24]
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	e7fd      	b.n	80023ee <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80023f2:	f001 ff43 	bl	800427c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80023f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80023fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d024      	beq.n	800244c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800240a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002412:	f001 fabb 	bl	800398c <pvTaskIncrementMutexHeldCount>
 8002416:	4602      	mov	r2, r0
 8002418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800241c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00f      	beq.n	8002444 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002426:	3310      	adds	r3, #16
 8002428:	4618      	mov	r0, r3
 800242a:	f000 ff67 	bl	80032fc <xTaskRemoveFromEventList>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002434:	4b54      	ldr	r3, [pc, #336]	@ (8002588 <xQueueSemaphoreTake+0x21c>)
 8002436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002444:	f001 ff4a 	bl	80042dc <vPortExitCritical>
				return pdPASS;
 8002448:	2301      	movs	r3, #1
 800244a:	e098      	b.n	800257e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d112      	bne.n	8002478 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	617b      	str	r3, [r7, #20]
}
 800246a:	bf00      	nop
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002470:	f001 ff34 	bl	80042dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002474:	2300      	movs	r3, #0
 8002476:	e082      	b.n	800257e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800247e:	f107 030c 	add.w	r3, r7, #12
 8002482:	4618      	mov	r0, r3
 8002484:	f000 ff9e 	bl	80033c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002488:	2301      	movs	r3, #1
 800248a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800248c:	f001 ff26 	bl	80042dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002490:	f000 fd0a 	bl	8002ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002494:	f001 fef2 	bl	800427c <vPortEnterCritical>
 8002498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d103      	bne.n	80024ae <xQueueSemaphoreTake+0x142>
 80024a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024b4:	b25b      	sxtb	r3, r3
 80024b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ba:	d103      	bne.n	80024c4 <xQueueSemaphoreTake+0x158>
 80024bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024c4:	f001 ff0a 	bl	80042dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024c8:	463a      	mov	r2, r7
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 ff8d 	bl	80033f0 <xTaskCheckForTimeOut>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d132      	bne.n	8002542 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024de:	f000 f9f4 	bl	80028ca <prvIsQueueEmpty>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d026      	beq.n	8002536 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80024f0:	f001 fec4 	bl	800427c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80024f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f001 f8e1 	bl	80036c0 <xTaskPriorityInherit>
 80024fe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002500:	f001 feec 	bl	80042dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002506:	3324      	adds	r3, #36	@ 0x24
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fea3 	bl	8003258 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002512:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002514:	f000 f987 	bl	8002826 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002518:	f000 fcd4 	bl	8002ec4 <xTaskResumeAll>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	f47f af67 	bne.w	80023f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002524:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <xQueueSemaphoreTake+0x21c>)
 8002526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	e75d      	b.n	80023f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002536:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002538:	f000 f975 	bl	8002826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800253c:	f000 fcc2 	bl	8002ec4 <xTaskResumeAll>
 8002540:	e757      	b.n	80023f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002542:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002544:	f000 f96f 	bl	8002826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002548:	f000 fcbc 	bl	8002ec4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800254c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800254e:	f000 f9bc 	bl	80028ca <prvIsQueueEmpty>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	f43f af4c 	beq.w	80023f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800255a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00d      	beq.n	800257c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002560:	f001 fe8c 	bl	800427c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002564:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002566:	f000 f8b7 	bl	80026d8 <prvGetDisinheritPriorityAfterTimeout>
 800256a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800256c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002572:	4618      	mov	r0, r3
 8002574:	f001 f982 	bl	800387c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002578:	f001 feb0 	bl	80042dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800257c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800257e:	4618      	mov	r0, r3
 8002580:	3738      	adds	r7, #56	@ 0x38
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000ed04 	.word	0xe000ed04

0800258c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08e      	sub	sp, #56	@ 0x38
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10b      	bne.n	80025ba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	623b      	str	r3, [r7, #32]
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	e7fd      	b.n	80025b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <xQueueReceiveFromISR+0x3c>
 80025c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <xQueueReceiveFromISR+0x40>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <xQueueReceiveFromISR+0x42>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	61fb      	str	r3, [r7, #28]
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	e7fd      	b.n	80025e6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025ea:	f001 ff09 	bl	8004400 <vPortValidateInterruptPriority>
	__asm volatile
 80025ee:	f3ef 8211 	mrs	r2, BASEPRI
 80025f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	61ba      	str	r2, [r7, #24]
 8002604:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002606:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800260a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002612:	2b00      	cmp	r3, #0
 8002614:	d02f      	beq.n	8002676 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800261c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002624:	f000 f8d9 	bl	80027da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262a:	1e5a      	subs	r2, r3, #1
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002630:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d112      	bne.n	8002660 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800263a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002644:	3310      	adds	r3, #16
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fe58 	bl	80032fc <xTaskRemoveFromEventList>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00e      	beq.n	8002670 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e007      	b.n	8002670 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002664:	3301      	adds	r3, #1
 8002666:	b2db      	uxtb	r3, r3
 8002668:	b25a      	sxtb	r2, r3
 800266a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002670:	2301      	movs	r3, #1
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
 8002674:	e001      	b.n	800267a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002676:	2300      	movs	r3, #0
 8002678:	637b      	str	r3, [r7, #52]	@ 0x34
 800267a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f383 8811 	msr	BASEPRI, r3
}
 8002684:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002688:	4618      	mov	r0, r3
 800268a:	3738      	adds	r7, #56	@ 0x38
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10b      	bne.n	80026ba <vQueueDelete+0x2a>
	__asm volatile
 80026a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	60bb      	str	r3, [r7, #8]
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	e7fd      	b.n	80026b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f95c 	bl	8002978 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f001 ffa0 	bl	8004610 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d006      	beq.n	80026f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e001      	b.n	80026fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80026fa:	68fb      	ldr	r3, [r7, #12]
	}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d14d      	bne.n	80027c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	f001 f833 	bl	800379c <xTaskPriorityDisinherit>
 8002736:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	e043      	b.n	80027c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d119      	bne.n	800277a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6898      	ldr	r0, [r3, #8]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	461a      	mov	r2, r3
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	f002 f89f 	bl	8004894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	441a      	add	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d32b      	bcc.n	80027c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	e026      	b.n	80027c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	68d8      	ldr	r0, [r3, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	461a      	mov	r2, r3
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	f002 f885 	bl	8004894 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	425b      	negs	r3, r3
 8002794:	441a      	add	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d207      	bcs.n	80027b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	425b      	negs	r3, r3
 80027b0:	441a      	add	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d105      	bne.n	80027c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80027d0:	697b      	ldr	r3, [r7, #20]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d018      	beq.n	800281e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	441a      	add	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	d303      	bcc.n	800280e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68d9      	ldr	r1, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	461a      	mov	r2, r3
 8002818:	6838      	ldr	r0, [r7, #0]
 800281a:	f002 f83b 	bl	8004894 <memcpy>
	}
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800282e:	f001 fd25 	bl	800427c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002838:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800283a:	e011      	b.n	8002860 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d012      	beq.n	800286a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3324      	adds	r3, #36	@ 0x24
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fd57 	bl	80032fc <xTaskRemoveFromEventList>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002854:	f000 fe30 	bl	80034b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	3b01      	subs	r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	dce9      	bgt.n	800283c <prvUnlockQueue+0x16>
 8002868:	e000      	b.n	800286c <prvUnlockQueue+0x46>
					break;
 800286a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	22ff      	movs	r2, #255	@ 0xff
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002874:	f001 fd32 	bl	80042dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002878:	f001 fd00 	bl	800427c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002882:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002884:	e011      	b.n	80028aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d012      	beq.n	80028b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3310      	adds	r3, #16
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fd32 	bl	80032fc <xTaskRemoveFromEventList>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800289e:	f000 fe0b 	bl	80034b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028a2:	7bbb      	ldrb	r3, [r7, #14]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	dce9      	bgt.n	8002886 <prvUnlockQueue+0x60>
 80028b2:	e000      	b.n	80028b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80028b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	22ff      	movs	r2, #255	@ 0xff
 80028ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80028be:	f001 fd0d 	bl	80042dc <vPortExitCritical>
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028d2:	f001 fcd3 	bl	800427c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d102      	bne.n	80028e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028de:	2301      	movs	r3, #1
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	e001      	b.n	80028e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028e8:	f001 fcf8 	bl	80042dc <vPortExitCritical>

	return xReturn;
 80028ec:	68fb      	ldr	r3, [r7, #12]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028fe:	f001 fcbd 	bl	800427c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290a:	429a      	cmp	r2, r3
 800290c:	d102      	bne.n	8002914 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800290e:	2301      	movs	r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e001      	b.n	8002918 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002918:	f001 fce0 	bl	80042dc <vPortExitCritical>

	return xReturn;
 800291c:	68fb      	ldr	r3, [r7, #12]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e014      	b.n	8002962 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002938:	4a0e      	ldr	r2, [pc, #56]	@ (8002974 <vQueueAddToRegistry+0x4c>)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002944:	490b      	ldr	r1, [pc, #44]	@ (8002974 <vQueueAddToRegistry+0x4c>)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800294e:	4a09      	ldr	r2, [pc, #36]	@ (8002974 <vQueueAddToRegistry+0x4c>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800295a:	e006      	b.n	800296a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3301      	adds	r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b07      	cmp	r3, #7
 8002966:	d9e7      	bls.n	8002938 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000704 	.word	0x20000704

08002978 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e016      	b.n	80029b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002986:	4a10      	ldr	r2, [pc, #64]	@ (80029c8 <vQueueUnregisterQueue+0x50>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	d10b      	bne.n	80029ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002996:	4a0c      	ldr	r2, [pc, #48]	@ (80029c8 <vQueueUnregisterQueue+0x50>)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2100      	movs	r1, #0
 800299c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80029a0:	4a09      	ldr	r2, [pc, #36]	@ (80029c8 <vQueueUnregisterQueue+0x50>)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	2200      	movs	r2, #0
 80029aa:	605a      	str	r2, [r3, #4]
				break;
 80029ac:	e006      	b.n	80029bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3301      	adds	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b07      	cmp	r3, #7
 80029b8:	d9e5      	bls.n	8002986 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000704 	.word	0x20000704

080029cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029dc:	f001 fc4e 	bl	800427c <vPortEnterCritical>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d103      	bne.n	80029f6 <vQueueWaitForMessageRestricted+0x2a>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029fc:	b25b      	sxtb	r3, r3
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d103      	bne.n	8002a0c <vQueueWaitForMessageRestricted+0x40>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a0c:	f001 fc66 	bl	80042dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d106      	bne.n	8002a26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3324      	adds	r3, #36	@ 0x24
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fc3f 	bl	80032a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a26:	6978      	ldr	r0, [r7, #20]
 8002a28:	f7ff fefd 	bl	8002826 <prvUnlockQueue>
	}
 8002a2c:	bf00      	nop
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08e      	sub	sp, #56	@ 0x38
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	623b      	str	r3, [r7, #32]
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10b      	bne.n	8002a7e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	61fb      	str	r3, [r7, #28]
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	e7fd      	b.n	8002a7a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a7e:	235c      	movs	r3, #92	@ 0x5c
 8002a80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b5c      	cmp	r3, #92	@ 0x5c
 8002a86:	d00b      	beq.n	8002aa0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	61bb      	str	r3, [r7, #24]
}
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01e      	beq.n	8002ae4 <xTaskCreateStatic+0xb0>
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ab4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9303      	str	r3, [sp, #12]
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	9302      	str	r3, [sp, #8]
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f850 	bl	8002b7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002adc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ade:	f000 f8d5 	bl	8002c8c <prvAddNewTaskToReadyList>
 8002ae2:	e001      	b.n	8002ae8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ae8:	697b      	ldr	r3, [r7, #20]
	}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3728      	adds	r7, #40	@ 0x28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b08c      	sub	sp, #48	@ 0x30
 8002af6:	af04      	add	r7, sp, #16
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 fcba 	bl	8004480 <pvPortMalloc>
 8002b0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002b14:	205c      	movs	r0, #92	@ 0x5c
 8002b16:	f001 fcb3 	bl	8004480 <pvPortMalloc>
 8002b1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b28:	e005      	b.n	8002b36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f001 fd70 	bl	8004610 <vPortFree>
 8002b30:	e001      	b.n	8002b36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d017      	beq.n	8002b6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	2300      	movs	r3, #0
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	9302      	str	r3, [sp, #8]
 8002b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f80e 	bl	8002b7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b60:	69f8      	ldr	r0, [r7, #28]
 8002b62:	f000 f893 	bl	8002c8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e002      	b.n	8002b72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b72:	69bb      	ldr	r3, [r7, #24]
	}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	461a      	mov	r2, r3
 8002b94:	21a5      	movs	r1, #165	@ 0xa5
 8002b96:	f001 fe51 	bl	800483c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f023 0307 	bic.w	r3, r3, #7
 8002bb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	617b      	str	r3, [r7, #20]
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	e7fd      	b.n	8002bd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e012      	b.n	8002c02 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	7819      	ldrb	r1, [r3, #0]
 8002be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	3334      	adds	r3, #52	@ 0x34
 8002bec:	460a      	mov	r2, r1
 8002bee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b0f      	cmp	r3, #15
 8002c06:	d9e9      	bls.n	8002bdc <prvInitialiseNewTask+0x60>
 8002c08:	e000      	b.n	8002c0c <prvInitialiseNewTask+0x90>
		{
			break;
 8002c0a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c16:	2b37      	cmp	r3, #55	@ 0x37
 8002c18:	d901      	bls.n	8002c1e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c1a:	2337      	movs	r3, #55	@ 0x37
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c32:	3304      	adds	r3, #4
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fe42 	bl	80018be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3c:	3318      	adds	r3, #24
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe fe3d 	bl	80018be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	68f9      	ldr	r1, [r7, #12]
 8002c6c:	69b8      	ldr	r0, [r7, #24]
 8002c6e:	f001 fa15 	bl	800409c <pxPortInitialiseStack>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c76:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c84:	bf00      	nop
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c94:	f001 faf2 	bl	800427c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c98:	4b2d      	ldr	r3, [pc, #180]	@ (8002d50 <prvAddNewTaskToReadyList+0xc4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d50 <prvAddNewTaskToReadyList+0xc4>)
 8002ca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d54 <prvAddNewTaskToReadyList+0xc8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002caa:	4a2a      	ldr	r2, [pc, #168]	@ (8002d54 <prvAddNewTaskToReadyList+0xc8>)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cb0:	4b27      	ldr	r3, [pc, #156]	@ (8002d50 <prvAddNewTaskToReadyList+0xc4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d110      	bne.n	8002cda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002cb8:	f000 fc22 	bl	8003500 <prvInitialiseTaskLists>
 8002cbc:	e00d      	b.n	8002cda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cbe:	4b26      	ldr	r3, [pc, #152]	@ (8002d58 <prvAddNewTaskToReadyList+0xcc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cc6:	4b23      	ldr	r3, [pc, #140]	@ (8002d54 <prvAddNewTaskToReadyList+0xc8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d802      	bhi.n	8002cda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d54 <prvAddNewTaskToReadyList+0xc8>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cda:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <prvAddNewTaskToReadyList+0xd0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d5c <prvAddNewTaskToReadyList+0xd0>)
 8002ce2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d5c <prvAddNewTaskToReadyList+0xd0>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <prvAddNewTaskToReadyList+0xd4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d903      	bls.n	8002d00 <prvAddNewTaskToReadyList+0x74>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	4a18      	ldr	r2, [pc, #96]	@ (8002d60 <prvAddNewTaskToReadyList+0xd4>)
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4a15      	ldr	r2, [pc, #84]	@ (8002d64 <prvAddNewTaskToReadyList+0xd8>)
 8002d0e:	441a      	add	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f7fe fddd 	bl	80018d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d1c:	f001 fade 	bl	80042dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d20:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <prvAddNewTaskToReadyList+0xcc>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00e      	beq.n	8002d46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d28:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <prvAddNewTaskToReadyList+0xc8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d207      	bcs.n	8002d46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d36:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <prvAddNewTaskToReadyList+0xdc>)
 8002d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000c18 	.word	0x20000c18
 8002d54:	20000744 	.word	0x20000744
 8002d58:	20000c24 	.word	0x20000c24
 8002d5c:	20000c34 	.word	0x20000c34
 8002d60:	20000c20 	.word	0x20000c20
 8002d64:	20000748 	.word	0x20000748
 8002d68:	e000ed04 	.word	0xe000ed04

08002d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d018      	beq.n	8002db0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d7e:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <vTaskDelay+0x64>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <vTaskDelay+0x32>
	__asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	60bb      	str	r3, [r7, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	e7fd      	b.n	8002d9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d9e:	f000 f883 	bl	8002ea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002da2:	2100      	movs	r1, #0
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fe05 	bl	80039b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002daa:	f000 f88b 	bl	8002ec4 <xTaskResumeAll>
 8002dae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d107      	bne.n	8002dc6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002db6:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <vTaskDelay+0x68>)
 8002db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000c40 	.word	0x20000c40
 8002dd4:	e000ed04 	.word	0xe000ed04

08002dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	@ 0x28
 8002ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002de6:	463a      	mov	r2, r7
 8002de8:	1d39      	adds	r1, r7, #4
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fd14 	bl	800181c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	9202      	str	r2, [sp, #8]
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	460a      	mov	r2, r1
 8002e06:	4922      	ldr	r1, [pc, #136]	@ (8002e90 <vTaskStartScheduler+0xb8>)
 8002e08:	4822      	ldr	r0, [pc, #136]	@ (8002e94 <vTaskStartScheduler+0xbc>)
 8002e0a:	f7ff fe13 	bl	8002a34 <xTaskCreateStatic>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4a21      	ldr	r2, [pc, #132]	@ (8002e98 <vTaskStartScheduler+0xc0>)
 8002e12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e14:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <vTaskStartScheduler+0xc0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e001      	b.n	8002e26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002e2c:	f000 fe16 	bl	8003a5c <xTimerCreateTimerTask>
 8002e30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d116      	bne.n	8002e66 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	613b      	str	r3, [r7, #16]
}
 8002e4a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <vTaskStartScheduler+0xc4>)
 8002e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e54:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <vTaskStartScheduler+0xc8>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002e5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ea4 <vTaskStartScheduler+0xcc>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e60:	f001 f99a 	bl	8004198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e64:	e00f      	b.n	8002e86 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d10b      	bne.n	8002e86 <vTaskStartScheduler+0xae>
	__asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	60fb      	str	r3, [r7, #12]
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	e7fd      	b.n	8002e82 <vTaskStartScheduler+0xaa>
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	0800491c 	.word	0x0800491c
 8002e94:	080034d1 	.word	0x080034d1
 8002e98:	20000c3c 	.word	0x20000c3c
 8002e9c:	20000c38 	.word	0x20000c38
 8002ea0:	20000c24 	.word	0x20000c24
 8002ea4:	20000c1c 	.word	0x20000c1c

08002ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002eac:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <vTaskSuspendAll+0x18>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	4a03      	ldr	r2, [pc, #12]	@ (8002ec0 <vTaskSuspendAll+0x18>)
 8002eb4:	6013      	str	r3, [r2, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000c40 	.word	0x20000c40

08002ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ed2:	4b42      	ldr	r3, [pc, #264]	@ (8002fdc <xTaskResumeAll+0x118>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <xTaskResumeAll+0x2e>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	603b      	str	r3, [r7, #0]
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	e7fd      	b.n	8002eee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ef2:	f001 f9c3 	bl	800427c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ef6:	4b39      	ldr	r3, [pc, #228]	@ (8002fdc <xTaskResumeAll+0x118>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	4a37      	ldr	r2, [pc, #220]	@ (8002fdc <xTaskResumeAll+0x118>)
 8002efe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f00:	4b36      	ldr	r3, [pc, #216]	@ (8002fdc <xTaskResumeAll+0x118>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d162      	bne.n	8002fce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f08:	4b35      	ldr	r3, [pc, #212]	@ (8002fe0 <xTaskResumeAll+0x11c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d05e      	beq.n	8002fce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f10:	e02f      	b.n	8002f72 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f12:	4b34      	ldr	r3, [pc, #208]	@ (8002fe4 <xTaskResumeAll+0x120>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3318      	adds	r3, #24
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fd34 	bl	800198c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3304      	adds	r3, #4
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fd2f 	bl	800198c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f32:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe8 <xTaskResumeAll+0x124>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d903      	bls.n	8002f42 <xTaskResumeAll+0x7e>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002fe8 <xTaskResumeAll+0x124>)
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4a27      	ldr	r2, [pc, #156]	@ (8002fec <xTaskResumeAll+0x128>)
 8002f50:	441a      	add	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f7fe fcbc 	bl	80018d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f62:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <xTaskResumeAll+0x12c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d302      	bcc.n	8002f72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002f6c:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <xTaskResumeAll+0x130>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f72:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe4 <xTaskResumeAll+0x120>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1cb      	bne.n	8002f12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f80:	f000 fb5c 	bl	800363c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff8 <xTaskResumeAll+0x134>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f90:	f000 f844 	bl	800301c <xTaskIncrementTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <xTaskResumeAll+0x130>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f1      	bne.n	8002f90 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8002fac:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <xTaskResumeAll+0x134>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <xTaskResumeAll+0x130>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <xTaskResumeAll+0x138>)
 8002fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fce:	f001 f985 	bl	80042dc <vPortExitCritical>

	return xAlreadyYielded;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000c40 	.word	0x20000c40
 8002fe0:	20000c18 	.word	0x20000c18
 8002fe4:	20000bd8 	.word	0x20000bd8
 8002fe8:	20000c20 	.word	0x20000c20
 8002fec:	20000748 	.word	0x20000748
 8002ff0:	20000744 	.word	0x20000744
 8002ff4:	20000c2c 	.word	0x20000c2c
 8002ff8:	20000c28 	.word	0x20000c28
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003006:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <xTaskGetTickCount+0x18>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800300c:	687b      	ldr	r3, [r7, #4]
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	20000c1c 	.word	0x20000c1c

0800301c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003026:	4b52      	ldr	r3, [pc, #328]	@ (8003170 <xTaskIncrementTick+0x154>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 808f 	bne.w	800314e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003030:	4b50      	ldr	r3, [pc, #320]	@ (8003174 <xTaskIncrementTick+0x158>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003038:	4a4e      	ldr	r2, [pc, #312]	@ (8003174 <xTaskIncrementTick+0x158>)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d121      	bne.n	8003088 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003044:	4b4c      	ldr	r3, [pc, #304]	@ (8003178 <xTaskIncrementTick+0x15c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <xTaskIncrementTick+0x4a>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	603b      	str	r3, [r7, #0]
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	e7fd      	b.n	8003062 <xTaskIncrementTick+0x46>
 8003066:	4b44      	ldr	r3, [pc, #272]	@ (8003178 <xTaskIncrementTick+0x15c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	4b43      	ldr	r3, [pc, #268]	@ (800317c <xTaskIncrementTick+0x160>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a41      	ldr	r2, [pc, #260]	@ (8003178 <xTaskIncrementTick+0x15c>)
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4a41      	ldr	r2, [pc, #260]	@ (800317c <xTaskIncrementTick+0x160>)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b41      	ldr	r3, [pc, #260]	@ (8003180 <xTaskIncrementTick+0x164>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3301      	adds	r3, #1
 8003080:	4a3f      	ldr	r2, [pc, #252]	@ (8003180 <xTaskIncrementTick+0x164>)
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	f000 fada 	bl	800363c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003088:	4b3e      	ldr	r3, [pc, #248]	@ (8003184 <xTaskIncrementTick+0x168>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	429a      	cmp	r2, r3
 8003090:	d34e      	bcc.n	8003130 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003092:	4b39      	ldr	r3, [pc, #228]	@ (8003178 <xTaskIncrementTick+0x15c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <xTaskIncrementTick+0x84>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <xTaskIncrementTick+0x86>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030a6:	4b37      	ldr	r3, [pc, #220]	@ (8003184 <xTaskIncrementTick+0x168>)
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ac:	601a      	str	r2, [r3, #0]
					break;
 80030ae:	e03f      	b.n	8003130 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030b0:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <xTaskIncrementTick+0x15c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d203      	bcs.n	80030d0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003184 <xTaskIncrementTick+0x168>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
						break;
 80030ce:	e02f      	b.n	8003130 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fc59 	bl	800198c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3318      	adds	r3, #24
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fc50 	bl	800198c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f0:	4b25      	ldr	r3, [pc, #148]	@ (8003188 <xTaskIncrementTick+0x16c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d903      	bls.n	8003100 <xTaskIncrementTick+0xe4>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	4a22      	ldr	r2, [pc, #136]	@ (8003188 <xTaskIncrementTick+0x16c>)
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4a1f      	ldr	r2, [pc, #124]	@ (800318c <xTaskIncrementTick+0x170>)
 800310e:	441a      	add	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	3304      	adds	r3, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f7fe fbdd 	bl	80018d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003120:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <xTaskIncrementTick+0x174>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	429a      	cmp	r2, r3
 8003128:	d3b3      	bcc.n	8003092 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800312a:	2301      	movs	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800312e:	e7b0      	b.n	8003092 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003130:	4b17      	ldr	r3, [pc, #92]	@ (8003190 <xTaskIncrementTick+0x174>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003136:	4915      	ldr	r1, [pc, #84]	@ (800318c <xTaskIncrementTick+0x170>)
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d907      	bls.n	8003158 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e004      	b.n	8003158 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800314e:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <xTaskIncrementTick+0x178>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3301      	adds	r3, #1
 8003154:	4a0f      	ldr	r2, [pc, #60]	@ (8003194 <xTaskIncrementTick+0x178>)
 8003156:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003158:	4b0f      	ldr	r3, [pc, #60]	@ (8003198 <xTaskIncrementTick+0x17c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003164:	697b      	ldr	r3, [r7, #20]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000c40 	.word	0x20000c40
 8003174:	20000c1c 	.word	0x20000c1c
 8003178:	20000bd0 	.word	0x20000bd0
 800317c:	20000bd4 	.word	0x20000bd4
 8003180:	20000c30 	.word	0x20000c30
 8003184:	20000c38 	.word	0x20000c38
 8003188:	20000c20 	.word	0x20000c20
 800318c:	20000748 	.word	0x20000748
 8003190:	20000744 	.word	0x20000744
 8003194:	20000c28 	.word	0x20000c28
 8003198:	20000c2c 	.word	0x20000c2c

0800319c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031a2:	4b28      	ldr	r3, [pc, #160]	@ (8003244 <vTaskSwitchContext+0xa8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031aa:	4b27      	ldr	r3, [pc, #156]	@ (8003248 <vTaskSwitchContext+0xac>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031b0:	e042      	b.n	8003238 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80031b2:	4b25      	ldr	r3, [pc, #148]	@ (8003248 <vTaskSwitchContext+0xac>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80031b8:	4b24      	ldr	r3, [pc, #144]	@ (800324c <vTaskSwitchContext+0xb0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e011      	b.n	80031e4 <vTaskSwitchContext+0x48>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <vTaskSwitchContext+0x42>
	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	607b      	str	r3, [r7, #4]
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	e7fd      	b.n	80031da <vTaskSwitchContext+0x3e>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	491a      	ldr	r1, [pc, #104]	@ (8003250 <vTaskSwitchContext+0xb4>)
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0e3      	beq.n	80031c0 <vTaskSwitchContext+0x24>
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4a13      	ldr	r2, [pc, #76]	@ (8003250 <vTaskSwitchContext+0xb4>)
 8003204:	4413      	add	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3308      	adds	r3, #8
 800321a:	429a      	cmp	r2, r3
 800321c:	d104      	bne.n	8003228 <vTaskSwitchContext+0x8c>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4a09      	ldr	r2, [pc, #36]	@ (8003254 <vTaskSwitchContext+0xb8>)
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4a06      	ldr	r2, [pc, #24]	@ (800324c <vTaskSwitchContext+0xb0>)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6013      	str	r3, [r2, #0]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000c40 	.word	0x20000c40
 8003248:	20000c2c 	.word	0x20000c2c
 800324c:	20000c20 	.word	0x20000c20
 8003250:	20000748 	.word	0x20000748
 8003254:	20000744 	.word	0x20000744

08003258 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	60fb      	str	r3, [r7, #12]
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003280:	4b07      	ldr	r3, [pc, #28]	@ (80032a0 <vTaskPlaceOnEventList+0x48>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3318      	adds	r3, #24
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7fe fb47 	bl	800191c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800328e:	2101      	movs	r1, #1
 8003290:	6838      	ldr	r0, [r7, #0]
 8003292:	f000 fb8f 	bl	80039b4 <prvAddCurrentTaskToDelayedList>
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000744 	.word	0x20000744

080032a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10b      	bne.n	80032ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	617b      	str	r3, [r7, #20]
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	e7fd      	b.n	80032ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032ce:	4b0a      	ldr	r3, [pc, #40]	@ (80032f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3318      	adds	r3, #24
 80032d4:	4619      	mov	r1, r3
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7fe fafd 	bl	80018d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	68b8      	ldr	r0, [r7, #8]
 80032ec:	f000 fb62 	bl	80039b4 <prvAddCurrentTaskToDelayedList>
	}
 80032f0:	bf00      	nop
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000744 	.word	0x20000744

080032fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10b      	bne.n	800332a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	60fb      	str	r3, [r7, #12]
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	e7fd      	b.n	8003326 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	3318      	adds	r3, #24
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fb2c 	bl	800198c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003334:	4b1d      	ldr	r3, [pc, #116]	@ (80033ac <xTaskRemoveFromEventList+0xb0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11d      	bne.n	8003378 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	3304      	adds	r3, #4
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe fb23 	bl	800198c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800334a:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <xTaskRemoveFromEventList+0xb4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d903      	bls.n	800335a <xTaskRemoveFromEventList+0x5e>
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003356:	4a16      	ldr	r2, [pc, #88]	@ (80033b0 <xTaskRemoveFromEventList+0xb4>)
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4a13      	ldr	r2, [pc, #76]	@ (80033b4 <xTaskRemoveFromEventList+0xb8>)
 8003368:	441a      	add	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7fe fab0 	bl	80018d6 <vListInsertEnd>
 8003376:	e005      	b.n	8003384 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	3318      	adds	r3, #24
 800337c:	4619      	mov	r1, r3
 800337e:	480e      	ldr	r0, [pc, #56]	@ (80033b8 <xTaskRemoveFromEventList+0xbc>)
 8003380:	f7fe faa9 	bl	80018d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003388:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <xTaskRemoveFromEventList+0xc0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338e:	429a      	cmp	r2, r3
 8003390:	d905      	bls.n	800339e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003392:	2301      	movs	r3, #1
 8003394:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003396:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <xTaskRemoveFromEventList+0xc4>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e001      	b.n	80033a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80033a2:	697b      	ldr	r3, [r7, #20]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000c40 	.word	0x20000c40
 80033b0:	20000c20 	.word	0x20000c20
 80033b4:	20000748 	.word	0x20000748
 80033b8:	20000bd8 	.word	0x20000bd8
 80033bc:	20000744 	.word	0x20000744
 80033c0:	20000c2c 	.word	0x20000c2c

080033c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <vTaskInternalSetTimeOutState+0x24>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <vTaskInternalSetTimeOutState+0x28>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	605a      	str	r2, [r3, #4]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000c30 	.word	0x20000c30
 80033ec:	20000c1c 	.word	0x20000c1c

080033f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10b      	bne.n	8003418 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	613b      	str	r3, [r7, #16]
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10b      	bne.n	8003436 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	60fb      	str	r3, [r7, #12]
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	e7fd      	b.n	8003432 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003436:	f000 ff21 	bl	800427c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800343a:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <xTaskCheckForTimeOut+0xc0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d102      	bne.n	800345a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	e023      	b.n	80034a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b15      	ldr	r3, [pc, #84]	@ (80034b4 <xTaskCheckForTimeOut+0xc4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d007      	beq.n	8003476 <xTaskCheckForTimeOut+0x86>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	e015      	b.n	80034a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	429a      	cmp	r2, r3
 800347e:	d20b      	bcs.n	8003498 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	1ad2      	subs	r2, r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ff99 	bl	80033c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e004      	b.n	80034a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800349e:	2301      	movs	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80034a2:	f000 ff1b 	bl	80042dc <vPortExitCritical>

	return xReturn;
 80034a6:	69fb      	ldr	r3, [r7, #28]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000c1c 	.word	0x20000c1c
 80034b4:	20000c30 	.word	0x20000c30

080034b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80034bc:	4b03      	ldr	r3, [pc, #12]	@ (80034cc <vTaskMissedYield+0x14>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000c2c 	.word	0x20000c2c

080034d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034d8:	f000 f852 	bl	8003580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034dc:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <prvIdleTask+0x28>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d9f9      	bls.n	80034d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <prvIdleTask+0x2c>)
 80034e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034f4:	e7f0      	b.n	80034d8 <prvIdleTask+0x8>
 80034f6:	bf00      	nop
 80034f8:	20000748 	.word	0x20000748
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	e00c      	b.n	8003526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a12      	ldr	r2, [pc, #72]	@ (8003560 <prvInitialiseTaskLists+0x60>)
 8003518:	4413      	add	r3, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe f9b0 	bl	8001880 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3301      	adds	r3, #1
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b37      	cmp	r3, #55	@ 0x37
 800352a:	d9ef      	bls.n	800350c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800352c:	480d      	ldr	r0, [pc, #52]	@ (8003564 <prvInitialiseTaskLists+0x64>)
 800352e:	f7fe f9a7 	bl	8001880 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003532:	480d      	ldr	r0, [pc, #52]	@ (8003568 <prvInitialiseTaskLists+0x68>)
 8003534:	f7fe f9a4 	bl	8001880 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003538:	480c      	ldr	r0, [pc, #48]	@ (800356c <prvInitialiseTaskLists+0x6c>)
 800353a:	f7fe f9a1 	bl	8001880 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800353e:	480c      	ldr	r0, [pc, #48]	@ (8003570 <prvInitialiseTaskLists+0x70>)
 8003540:	f7fe f99e 	bl	8001880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003544:	480b      	ldr	r0, [pc, #44]	@ (8003574 <prvInitialiseTaskLists+0x74>)
 8003546:	f7fe f99b 	bl	8001880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800354a:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <prvInitialiseTaskLists+0x78>)
 800354c:	4a05      	ldr	r2, [pc, #20]	@ (8003564 <prvInitialiseTaskLists+0x64>)
 800354e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003550:	4b0a      	ldr	r3, [pc, #40]	@ (800357c <prvInitialiseTaskLists+0x7c>)
 8003552:	4a05      	ldr	r2, [pc, #20]	@ (8003568 <prvInitialiseTaskLists+0x68>)
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000748 	.word	0x20000748
 8003564:	20000ba8 	.word	0x20000ba8
 8003568:	20000bbc 	.word	0x20000bbc
 800356c:	20000bd8 	.word	0x20000bd8
 8003570:	20000bec 	.word	0x20000bec
 8003574:	20000c04 	.word	0x20000c04
 8003578:	20000bd0 	.word	0x20000bd0
 800357c:	20000bd4 	.word	0x20000bd4

08003580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003586:	e019      	b.n	80035bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003588:	f000 fe78 	bl	800427c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800358c:	4b10      	ldr	r3, [pc, #64]	@ (80035d0 <prvCheckTasksWaitingTermination+0x50>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe f9f7 	bl	800198c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800359e:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <prvCheckTasksWaitingTermination+0x54>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	4a0b      	ldr	r2, [pc, #44]	@ (80035d4 <prvCheckTasksWaitingTermination+0x54>)
 80035a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80035a8:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <prvCheckTasksWaitingTermination+0x58>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	4a0a      	ldr	r2, [pc, #40]	@ (80035d8 <prvCheckTasksWaitingTermination+0x58>)
 80035b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035b2:	f000 fe93 	bl	80042dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f810 	bl	80035dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <prvCheckTasksWaitingTermination+0x58>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e1      	bne.n	8003588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000bec 	.word	0x20000bec
 80035d4:	20000c18 	.word	0x20000c18
 80035d8:	20000c00 	.word	0x20000c00

080035dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d108      	bne.n	8003600 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 f80c 	bl	8004610 <vPortFree>
				vPortFree( pxTCB );
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f001 f809 	bl	8004610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035fe:	e019      	b.n	8003634 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003606:	2b01      	cmp	r3, #1
 8003608:	d103      	bne.n	8003612 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f001 f800 	bl	8004610 <vPortFree>
	}
 8003610:	e010      	b.n	8003634 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003618:	2b02      	cmp	r3, #2
 800361a:	d00b      	beq.n	8003634 <prvDeleteTCB+0x58>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	60fb      	str	r3, [r7, #12]
}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <prvDeleteTCB+0x54>
	}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003642:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <prvResetNextTaskUnblockTime+0x40>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <prvResetNextTaskUnblockTime+0x14>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <prvResetNextTaskUnblockTime+0x16>
 8003650:	2300      	movs	r3, #0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d004      	beq.n	8003660 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003656:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <prvResetNextTaskUnblockTime+0x44>)
 8003658:	f04f 32ff 	mov.w	r2, #4294967295
 800365c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800365e:	e008      	b.n	8003672 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003660:	4b06      	ldr	r3, [pc, #24]	@ (800367c <prvResetNextTaskUnblockTime+0x40>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4a04      	ldr	r2, [pc, #16]	@ (8003680 <prvResetNextTaskUnblockTime+0x44>)
 8003670:	6013      	str	r3, [r2, #0]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	20000bd0 	.word	0x20000bd0
 8003680:	20000c38 	.word	0x20000c38

08003684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800368a:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <xTaskGetSchedulerState+0x34>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003692:	2301      	movs	r3, #1
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	e008      	b.n	80036aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003698:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <xTaskGetSchedulerState+0x38>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80036a0:	2302      	movs	r3, #2
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	e001      	b.n	80036aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80036aa:	687b      	ldr	r3, [r7, #4]
	}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000c24 	.word	0x20000c24
 80036bc:	20000c40 	.word	0x20000c40

080036c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d056      	beq.n	8003784 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036da:	4b2d      	ldr	r3, [pc, #180]	@ (8003790 <xTaskPriorityInherit+0xd0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d246      	bcs.n	8003772 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	db06      	blt.n	80036fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ec:	4b28      	ldr	r3, [pc, #160]	@ (8003790 <xTaskPriorityInherit+0xd0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6959      	ldr	r1, [r3, #20]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4a22      	ldr	r2, [pc, #136]	@ (8003794 <xTaskPriorityInherit+0xd4>)
 800370c:	4413      	add	r3, r2
 800370e:	4299      	cmp	r1, r3
 8003710:	d101      	bne.n	8003716 <xTaskPriorityInherit+0x56>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <xTaskPriorityInherit+0x58>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d022      	beq.n	8003762 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3304      	adds	r3, #4
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe f933 	bl	800198c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003726:	4b1a      	ldr	r3, [pc, #104]	@ (8003790 <xTaskPriorityInherit+0xd0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003734:	4b18      	ldr	r3, [pc, #96]	@ (8003798 <xTaskPriorityInherit+0xd8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d903      	bls.n	8003744 <xTaskPriorityInherit+0x84>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <xTaskPriorityInherit+0xd8>)
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4a10      	ldr	r2, [pc, #64]	@ (8003794 <xTaskPriorityInherit+0xd4>)
 8003752:	441a      	add	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3304      	adds	r3, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f7fe f8bb 	bl	80018d6 <vListInsertEnd>
 8003760:	e004      	b.n	800376c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003762:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <xTaskPriorityInherit+0xd0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800376c:	2301      	movs	r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	e008      	b.n	8003784 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <xTaskPriorityInherit+0xd0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377c:	429a      	cmp	r2, r3
 800377e:	d201      	bcs.n	8003784 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003780:	2301      	movs	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003784:	68fb      	ldr	r3, [r7, #12]
	}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000744 	.word	0x20000744
 8003794:	20000748 	.word	0x20000748
 8003798:	20000c20 	.word	0x20000c20

0800379c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d058      	beq.n	8003864 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80037b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003870 <xTaskPriorityDisinherit+0xd4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d00b      	beq.n	80037d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	60fb      	str	r3, [r7, #12]
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	60bb      	str	r3, [r7, #8]
}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f8:	1e5a      	subs	r2, r3, #1
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003806:	429a      	cmp	r2, r3
 8003808:	d02c      	beq.n	8003864 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d128      	bne.n	8003864 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	3304      	adds	r3, #4
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe f8b8 	bl	800198c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003834:	4b0f      	ldr	r3, [pc, #60]	@ (8003874 <xTaskPriorityDisinherit+0xd8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d903      	bls.n	8003844 <xTaskPriorityDisinherit+0xa8>
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	4a0c      	ldr	r2, [pc, #48]	@ (8003874 <xTaskPriorityDisinherit+0xd8>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4a09      	ldr	r2, [pc, #36]	@ (8003878 <xTaskPriorityDisinherit+0xdc>)
 8003852:	441a      	add	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7fe f83b 	bl	80018d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003864:	697b      	ldr	r3, [r7, #20]
	}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000744 	.word	0x20000744
 8003874:	20000c20 	.word	0x20000c20
 8003878:	20000748 	.word	0x20000748

0800387c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800388a:	2301      	movs	r3, #1
 800388c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d071      	beq.n	8003978 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10b      	bne.n	80038b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	60fb      	str	r3, [r7, #12]
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	e7fd      	b.n	80038b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d902      	bls.n	80038c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	e002      	b.n	80038ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d051      	beq.n	8003978 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d14c      	bne.n	8003978 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80038de:	4b28      	ldr	r3, [pc, #160]	@ (8003980 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d10b      	bne.n	8003900 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	60bb      	str	r3, [r7, #8]
}
 80038fa:	bf00      	nop
 80038fc:	bf00      	nop
 80038fe:	e7fd      	b.n	80038fc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	db04      	blt.n	800391e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	6959      	ldr	r1, [r3, #20]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4a15      	ldr	r2, [pc, #84]	@ (8003984 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800392e:	4413      	add	r3, r2
 8003930:	4299      	cmp	r1, r3
 8003932:	d101      	bne.n	8003938 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8003938:	2300      	movs	r3, #0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01c      	beq.n	8003978 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3304      	adds	r3, #4
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe f822 	bl	800198c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800394c:	4b0e      	ldr	r3, [pc, #56]	@ (8003988 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d903      	bls.n	800395c <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4a06      	ldr	r2, [pc, #24]	@ (8003984 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800396a:	441a      	add	r2, r3
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f7fd ffaf 	bl	80018d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003978:	bf00      	nop
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000744 	.word	0x20000744
 8003984:	20000748 	.word	0x20000748
 8003988:	20000c20 	.word	0x20000c20

0800398c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003990:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800399e:	3201      	adds	r2, #1
 80039a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80039a2:	4b03      	ldr	r3, [pc, #12]	@ (80039b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80039a4:	681b      	ldr	r3, [r3, #0]
	}
 80039a6:	4618      	mov	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000744 	.word	0x20000744

080039b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039be:	4b21      	ldr	r3, [pc, #132]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x90>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039c4:	4b20      	ldr	r3, [pc, #128]	@ (8003a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd ffde 	bl	800198c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d10a      	bne.n	80039ee <prvAddCurrentTaskToDelayedList+0x3a>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039de:	4b1a      	ldr	r3, [pc, #104]	@ (8003a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3304      	adds	r3, #4
 80039e4:	4619      	mov	r1, r3
 80039e6:	4819      	ldr	r0, [pc, #100]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x98>)
 80039e8:	f7fd ff75 	bl	80018d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039ec:	e026      	b.n	8003a3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4413      	add	r3, r2
 80039f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039f6:	4b14      	ldr	r3, [pc, #80]	@ (8003a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d209      	bcs.n	8003a1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a06:	4b12      	ldr	r3, [pc, #72]	@ (8003a50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	4610      	mov	r0, r2
 8003a14:	f7fd ff82 	bl	800191c <vListInsert>
}
 8003a18:	e010      	b.n	8003a3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f7fd ff78 	bl	800191c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d202      	bcs.n	8003a3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a36:	4a08      	ldr	r2, [pc, #32]	@ (8003a58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000c1c 	.word	0x20000c1c
 8003a48:	20000744 	.word	0x20000744
 8003a4c:	20000c04 	.word	0x20000c04
 8003a50:	20000bd4 	.word	0x20000bd4
 8003a54:	20000bd0 	.word	0x20000bd0
 8003a58:	20000c38 	.word	0x20000c38

08003a5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	@ 0x28
 8003a60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a66:	f000 fad9 	bl	800401c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae0 <xTimerCreateTimerTask+0x84>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d021      	beq.n	8003ab6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a7a:	1d3a      	adds	r2, r7, #4
 8003a7c:	f107 0108 	add.w	r1, r7, #8
 8003a80:	f107 030c 	add.w	r3, r7, #12
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd fee1 	bl	800184c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	9202      	str	r2, [sp, #8]
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	2302      	movs	r3, #2
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	4911      	ldr	r1, [pc, #68]	@ (8003ae4 <xTimerCreateTimerTask+0x88>)
 8003a9e:	4812      	ldr	r0, [pc, #72]	@ (8003ae8 <xTimerCreateTimerTask+0x8c>)
 8003aa0:	f7fe ffc8 	bl	8002a34 <xTaskCreateStatic>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a11      	ldr	r2, [pc, #68]	@ (8003aec <xTimerCreateTimerTask+0x90>)
 8003aa8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003aaa:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <xTimerCreateTimerTask+0x90>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10b      	bne.n	8003ad4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	613b      	str	r3, [r7, #16]
}
 8003ace:	bf00      	nop
 8003ad0:	bf00      	nop
 8003ad2:	e7fd      	b.n	8003ad0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003ad4:	697b      	ldr	r3, [r7, #20]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000c74 	.word	0x20000c74
 8003ae4:	08004924 	.word	0x08004924
 8003ae8:	08003c11 	.word	0x08003c11
 8003aec:	20000c78 	.word	0x20000c78

08003af0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	@ 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <xTimerGenericCommand+0x30>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	623b      	str	r3, [r7, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	bf00      	nop
 8003b1e:	e7fd      	b.n	8003b1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b20:	4b19      	ldr	r3, [pc, #100]	@ (8003b88 <xTimerGenericCommand+0x98>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02a      	beq.n	8003b7e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	dc18      	bgt.n	8003b6c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b3a:	f7ff fda3 	bl	8003684 <xTaskGetSchedulerState>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d109      	bne.n	8003b58 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b44:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <xTimerGenericCommand+0x98>)
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	f107 0110 	add.w	r1, r7, #16
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b50:	f7fe f8fc 	bl	8001d4c <xQueueGenericSend>
 8003b54:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b56:	e012      	b.n	8003b7e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b58:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <xTimerGenericCommand+0x98>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	f107 0110 	add.w	r1, r7, #16
 8003b60:	2300      	movs	r3, #0
 8003b62:	2200      	movs	r2, #0
 8003b64:	f7fe f8f2 	bl	8001d4c <xQueueGenericSend>
 8003b68:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b6a:	e008      	b.n	8003b7e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b6c:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <xTimerGenericCommand+0x98>)
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	f107 0110 	add.w	r1, r7, #16
 8003b74:	2300      	movs	r3, #0
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	f7fe f9ea 	bl	8001f50 <xQueueGenericSendFromISR>
 8003b7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3728      	adds	r7, #40	@ 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000c74 	.word	0x20000c74

08003b8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b96:	4b1d      	ldr	r3, [pc, #116]	@ (8003c0c <prvProcessExpiredTimer+0x80>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fd fef1 	bl	800198c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d123      	bne.n	8003bfa <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	18d1      	adds	r1, r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	f000 f8cc 	bl	8003d5c <prvInsertTimerInActiveList>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d017      	beq.n	8003bfa <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bca:	2300      	movs	r3, #0
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	6978      	ldr	r0, [r7, #20]
 8003bd6:	f7ff ff8b 	bl	8003af0 <xTimerGenericCommand>
 8003bda:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60fb      	str	r3, [r7, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	e7fd      	b.n	8003bf6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	4798      	blx	r3
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000c6c 	.word	0x20000c6c

08003c10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c18:	f107 0308 	add.w	r3, r7, #8
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 f859 	bl	8003cd4 <prvGetNextExpireTime>
 8003c22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4619      	mov	r1, r3
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f805 	bl	8003c38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c2e:	f000 f8d7 	bl	8003de0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c32:	bf00      	nop
 8003c34:	e7f0      	b.n	8003c18 <prvTimerTask+0x8>
	...

08003c38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c42:	f7ff f931 	bl	8002ea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 f866 	bl	8003d1c <prvSampleTimeNow>
 8003c50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d130      	bne.n	8003cba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <prvProcessTimerOrBlockTask+0x3c>
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d806      	bhi.n	8003c74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c66:	f7ff f92d 	bl	8002ec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff8d 	bl	8003b8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c72:	e024      	b.n	8003cbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c7a:	4b13      	ldr	r3, [pc, #76]	@ (8003cc8 <prvProcessTimerOrBlockTask+0x90>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <prvProcessTimerOrBlockTask+0x94>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f7fe fe97 	bl	80029cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c9e:	f7ff f911 	bl	8002ec4 <xTaskResumeAll>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003ca8:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <prvProcessTimerOrBlockTask+0x98>)
 8003caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	f3bf 8f6f 	isb	sy
}
 8003cb8:	e001      	b.n	8003cbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cba:	f7ff f903 	bl	8002ec4 <xTaskResumeAll>
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000c70 	.word	0x20000c70
 8003ccc:	20000c74 	.word	0x20000c74
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <prvGetNextExpireTime+0x44>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cfa:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <prvGetNextExpireTime+0x44>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e001      	b.n	8003d0a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000c6c 	.word	0x20000c6c

08003d1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d24:	f7ff f96c 	bl	8003000 <xTaskGetTickCount>
 8003d28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <prvSampleTimeNow+0x3c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d205      	bcs.n	8003d40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d34:	f000 f910 	bl	8003f58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e002      	b.n	8003d46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d46:	4a04      	ldr	r2, [pc, #16]	@ (8003d58 <prvSampleTimeNow+0x3c>)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000c7c 	.word	0x20000c7c

08003d5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d812      	bhi.n	8003da8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	1ad2      	subs	r2, r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d90:	2301      	movs	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e01b      	b.n	8003dce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d96:	4b10      	ldr	r3, [pc, #64]	@ (8003dd8 <prvInsertTimerInActiveList+0x7c>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fd fdbb 	bl	800191c <vListInsert>
 8003da6:	e012      	b.n	8003dce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d206      	bcs.n	8003dbe <prvInsertTimerInActiveList+0x62>
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d302      	bcc.n	8003dbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003db8:	2301      	movs	r3, #1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e007      	b.n	8003dce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dbe:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <prvInsertTimerInActiveList+0x80>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4610      	mov	r0, r2
 8003dca:	f7fd fda7 	bl	800191c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003dce:	697b      	ldr	r3, [r7, #20]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000c70 	.word	0x20000c70
 8003ddc:	20000c6c 	.word	0x20000c6c

08003de0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08e      	sub	sp, #56	@ 0x38
 8003de4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003de6:	e0a5      	b.n	8003f34 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	da19      	bge.n	8003e22 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	3304      	adds	r3, #4
 8003df2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10b      	bne.n	8003e12 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	61fb      	str	r3, [r7, #28]
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	e7fd      	b.n	8003e0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e18:	6850      	ldr	r0, [r2, #4]
 8003e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e1c:	6892      	ldr	r2, [r2, #8]
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f2c0 8085 	blt.w	8003f34 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fd fda6 	bl	800198c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e40:	463b      	mov	r3, r7
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff ff6a 	bl	8003d1c <prvSampleTimeNow>
 8003e48:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b09      	cmp	r3, #9
 8003e4e:	d86c      	bhi.n	8003f2a <prvProcessReceivedCommands+0x14a>
 8003e50:	a201      	add	r2, pc, #4	@ (adr r2, 8003e58 <prvProcessReceivedCommands+0x78>)
 8003e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e56:	bf00      	nop
 8003e58:	08003e81 	.word	0x08003e81
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003e81 	.word	0x08003e81
 8003e64:	08003f2b 	.word	0x08003f2b
 8003e68:	08003edf 	.word	0x08003edf
 8003e6c:	08003f19 	.word	0x08003f19
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e81 	.word	0x08003e81
 8003e78:	08003f2b 	.word	0x08003f2b
 8003e7c:	08003edf 	.word	0x08003edf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	18d1      	adds	r1, r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e8e:	f7ff ff65 	bl	8003d5c <prvInsertTimerInActiveList>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d04a      	beq.n	8003f2e <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e9e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d142      	bne.n	8003f2e <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	441a      	add	r2, r3
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eba:	f7ff fe19 	bl	8003af0 <xTimerGenericCommand>
 8003ebe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d133      	bne.n	8003f2e <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	61bb      	str	r3, [r7, #24]
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	e7fd      	b.n	8003eda <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	617b      	str	r3, [r7, #20]
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f06:	699a      	ldr	r2, [r3, #24]
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	18d1      	adds	r1, r2, r3
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f12:	f7ff ff23 	bl	8003d5c <prvInsertTimerInActiveList>
					break;
 8003f16:	e00d      	b.n	8003f34 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d107      	bne.n	8003f32 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8003f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f24:	f000 fb74 	bl	8004610 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f28:	e003      	b.n	8003f32 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8003f2a:	bf00      	nop
 8003f2c:	e002      	b.n	8003f34 <prvProcessReceivedCommands+0x154>
					break;
 8003f2e:	bf00      	nop
 8003f30:	e000      	b.n	8003f34 <prvProcessReceivedCommands+0x154>
					break;
 8003f32:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f34:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <prvProcessReceivedCommands+0x174>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	1d39      	adds	r1, r7, #4
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe f933 	bl	80021a8 <xQueueReceive>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f47f af4f 	bne.w	8003de8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	3730      	adds	r7, #48	@ 0x30
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000c74 	.word	0x20000c74

08003f58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f5e:	e046      	b.n	8003fee <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f60:	4b2c      	ldr	r3, [pc, #176]	@ (8004014 <prvSwitchTimerLists+0xbc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004014 <prvSwitchTimerLists+0xbc>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fd07 	bl	800198c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d12f      	bne.n	8003fee <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4413      	add	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d90e      	bls.n	8003fbe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fac:	4b19      	ldr	r3, [pc, #100]	@ (8004014 <prvSwitchTimerLists+0xbc>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7fd fcb0 	bl	800191c <vListInsert>
 8003fbc:	e017      	b.n	8003fee <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff fd91 	bl	8003af0 <xTimerGenericCommand>
 8003fce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <prvSwitchTimerLists+0x96>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	603b      	str	r3, [r7, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	e7fd      	b.n	8003fea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fee:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <prvSwitchTimerLists+0xbc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1b3      	bne.n	8003f60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <prvSwitchTimerLists+0xbc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ffe:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <prvSwitchTimerLists+0xc0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a04      	ldr	r2, [pc, #16]	@ (8004014 <prvSwitchTimerLists+0xbc>)
 8004004:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004006:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <prvSwitchTimerLists+0xc0>)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	6013      	str	r3, [r2, #0]
}
 800400c:	bf00      	nop
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000c6c 	.word	0x20000c6c
 8004018:	20000c70 	.word	0x20000c70

0800401c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004022:	f000 f92b 	bl	800427c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004026:	4b15      	ldr	r3, [pc, #84]	@ (800407c <prvCheckForValidListAndQueue+0x60>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d120      	bne.n	8004070 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800402e:	4814      	ldr	r0, [pc, #80]	@ (8004080 <prvCheckForValidListAndQueue+0x64>)
 8004030:	f7fd fc26 	bl	8001880 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004034:	4813      	ldr	r0, [pc, #76]	@ (8004084 <prvCheckForValidListAndQueue+0x68>)
 8004036:	f7fd fc23 	bl	8001880 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800403a:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <prvCheckForValidListAndQueue+0x6c>)
 800403c:	4a10      	ldr	r2, [pc, #64]	@ (8004080 <prvCheckForValidListAndQueue+0x64>)
 800403e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004040:	4b12      	ldr	r3, [pc, #72]	@ (800408c <prvCheckForValidListAndQueue+0x70>)
 8004042:	4a10      	ldr	r2, [pc, #64]	@ (8004084 <prvCheckForValidListAndQueue+0x68>)
 8004044:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004046:	2300      	movs	r3, #0
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <prvCheckForValidListAndQueue+0x74>)
 800404c:	4a11      	ldr	r2, [pc, #68]	@ (8004094 <prvCheckForValidListAndQueue+0x78>)
 800404e:	2110      	movs	r1, #16
 8004050:	200a      	movs	r0, #10
 8004052:	f7fd fd2f 	bl	8001ab4 <xQueueGenericCreateStatic>
 8004056:	4603      	mov	r3, r0
 8004058:	4a08      	ldr	r2, [pc, #32]	@ (800407c <prvCheckForValidListAndQueue+0x60>)
 800405a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800405c:	4b07      	ldr	r3, [pc, #28]	@ (800407c <prvCheckForValidListAndQueue+0x60>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004064:	4b05      	ldr	r3, [pc, #20]	@ (800407c <prvCheckForValidListAndQueue+0x60>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	490b      	ldr	r1, [pc, #44]	@ (8004098 <prvCheckForValidListAndQueue+0x7c>)
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe fc5c 	bl	8002928 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004070:	f000 f934 	bl	80042dc <vPortExitCritical>
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000c74 	.word	0x20000c74
 8004080:	20000c44 	.word	0x20000c44
 8004084:	20000c58 	.word	0x20000c58
 8004088:	20000c6c 	.word	0x20000c6c
 800408c:	20000c70 	.word	0x20000c70
 8004090:	20000d20 	.word	0x20000d20
 8004094:	20000c80 	.word	0x20000c80
 8004098:	0800492c 	.word	0x0800492c

0800409c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3b04      	subs	r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3b04      	subs	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f023 0201 	bic.w	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3b04      	subs	r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040cc:	4a08      	ldr	r2, [pc, #32]	@ (80040f0 <pxPortInitialiseStack+0x54>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3b14      	subs	r3, #20
 80040d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3b20      	subs	r3, #32
 80040e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040e4:	68fb      	ldr	r3, [r7, #12]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	080040f5 	.word	0x080040f5

080040f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040fe:	4b12      	ldr	r3, [pc, #72]	@ (8004148 <prvTaskExitError+0x54>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d00b      	beq.n	8004120 <prvTaskExitError+0x2c>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60fb      	str	r3, [r7, #12]
}
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <prvTaskExitError+0x28>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	60bb      	str	r3, [r7, #8]
}
 8004132:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004134:	bf00      	nop
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0fc      	beq.n	8004136 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	20000010 	.word	0x20000010
 800414c:	00000000 	.word	0x00000000

08004150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <pxCurrentTCBConst2>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	6808      	ldr	r0, [r1, #0]
 8004156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800415a:	f380 8809 	msr	PSP, r0
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	f04e 0e0d 	orr.w	lr, lr, #13
 800416e:	4770      	bx	lr

08004170 <pxCurrentTCBConst2>:
 8004170:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004178:	4806      	ldr	r0, [pc, #24]	@ (8004194 <prvPortStartFirstTask+0x1c>)
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f380 8808 	msr	MSP, r0
 8004182:	b662      	cpsie	i
 8004184:	b661      	cpsie	f
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	df00      	svc	0
 8004190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004192:	bf00      	nop
 8004194:	e000ed08 	.word	0xe000ed08

08004198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800419e:	4b32      	ldr	r3, [pc, #200]	@ (8004268 <xPortStartScheduler+0xd0>)
 80041a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	22ff      	movs	r2, #255	@ 0xff
 80041ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4b2a      	ldr	r3, [pc, #168]	@ (800426c <xPortStartScheduler+0xd4>)
 80041c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041cc:	e009      	b.n	80041e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80041ce:	4b28      	ldr	r3, [pc, #160]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	4a26      	ldr	r2, [pc, #152]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ea:	2b80      	cmp	r3, #128	@ 0x80
 80041ec:	d0ef      	beq.n	80041ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ee:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1c3 0307 	rsb	r3, r3, #7
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d00b      	beq.n	8004212 <xPortStartScheduler+0x7a>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60bb      	str	r3, [r7, #8]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004212:	4b17      	ldr	r3, [pc, #92]	@ (8004270 <xPortStartScheduler+0xd8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <xPortStartScheduler+0xd8>)
 800421a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800421c:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <xPortStartScheduler+0xd8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004224:	4a12      	ldr	r2, [pc, #72]	@ (8004270 <xPortStartScheduler+0xd8>)
 8004226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004230:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0f      	ldr	r2, [pc, #60]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004236:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800423a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800423c:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <xPortStartScheduler+0xdc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0c      	ldr	r2, [pc, #48]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004242:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004248:	f000 f8b8 	bl	80043bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800424c:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <xPortStartScheduler+0xe0>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004252:	f7ff ff91 	bl	8004178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004256:	f7fe ffa1 	bl	800319c <vTaskSwitchContext>
	prvTaskExitError();
 800425a:	f7ff ff4b 	bl	80040f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000e400 	.word	0xe000e400
 800426c:	20000d70 	.word	0x20000d70
 8004270:	20000d74 	.word	0x20000d74
 8004274:	e000ed20 	.word	0xe000ed20
 8004278:	20000010 	.word	0x20000010

0800427c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	607b      	str	r3, [r7, #4]
}
 8004294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004296:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <vPortEnterCritical+0x58>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3301      	adds	r3, #1
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <vPortEnterCritical+0x58>)
 800429e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <vPortEnterCritical+0x58>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d110      	bne.n	80042ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042a8:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <vPortEnterCritical+0x5c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <vPortEnterCritical+0x4e>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	603b      	str	r3, [r7, #0]
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	e7fd      	b.n	80042c6 <vPortEnterCritical+0x4a>
	}
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr
 80042d4:	20000010 	.word	0x20000010
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042e2:	4b12      	ldr	r3, [pc, #72]	@ (800432c <vPortExitCritical+0x50>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <vPortExitCritical+0x26>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	607b      	str	r3, [r7, #4]
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	e7fd      	b.n	80042fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <vPortExitCritical+0x50>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3b01      	subs	r3, #1
 8004308:	4a08      	ldr	r2, [pc, #32]	@ (800432c <vPortExitCritical+0x50>)
 800430a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800430c:	4b07      	ldr	r3, [pc, #28]	@ (800432c <vPortExitCritical+0x50>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <vPortExitCritical+0x44>
 8004314:	2300      	movs	r3, #0
 8004316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f383 8811 	msr	BASEPRI, r3
}
 800431e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000010 	.word	0x20000010

08004330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004330:	f3ef 8009 	mrs	r0, PSP
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <pxCurrentTCBConst>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004340:	6010      	str	r0, [r2, #0]
 8004342:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004346:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800434a:	f380 8811 	msr	BASEPRI, r0
 800434e:	f7fe ff25 	bl	800319c <vTaskSwitchContext>
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8811 	msr	BASEPRI, r0
 800435a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	6808      	ldr	r0, [r1, #0]
 8004362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004366:	f380 8809 	msr	PSP, r0
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	4770      	bx	lr

08004370 <pxCurrentTCBConst>:
 8004370:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
}
 8004390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004392:	f7fe fe43 	bl	800301c <xTaskIncrementTick>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <xPortSysTickHandler+0x40>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f383 8811 	msr	BASEPRI, r3
}
 80043ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <vPortSetupTimerInterrupt+0x30>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043cc:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <vPortSetupTimerInterrupt+0x38>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a09      	ldr	r2, [pc, #36]	@ (80043f8 <vPortSetupTimerInterrupt+0x3c>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <vPortSetupTimerInterrupt+0x40>)
 80043da:	3b01      	subs	r3, #1
 80043dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043de:	4b03      	ldr	r3, [pc, #12]	@ (80043ec <vPortSetupTimerInterrupt+0x30>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	e000e010 	.word	0xe000e010
 80043f0:	e000e018 	.word	0xe000e018
 80043f4:	20000004 	.word	0x20000004
 80043f8:	10624dd3 	.word	0x10624dd3
 80043fc:	e000e014 	.word	0xe000e014

08004400 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004406:	f3ef 8305 	mrs	r3, IPSR
 800440a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b0f      	cmp	r3, #15
 8004410:	d915      	bls.n	800443e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004412:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <vPortValidateInterruptPriority+0x70>)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800441c:	4b15      	ldr	r3, [pc, #84]	@ (8004474 <vPortValidateInterruptPriority+0x74>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	7afa      	ldrb	r2, [r7, #11]
 8004422:	429a      	cmp	r2, r3
 8004424:	d20b      	bcs.n	800443e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	607b      	str	r3, [r7, #4]
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800443e:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <vPortValidateInterruptPriority+0x78>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004446:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <vPortValidateInterruptPriority+0x7c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d90b      	bls.n	8004466 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	603b      	str	r3, [r7, #0]
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <vPortValidateInterruptPriority+0x62>
	}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	e000e3f0 	.word	0xe000e3f0
 8004474:	20000d70 	.word	0x20000d70
 8004478:	e000ed0c 	.word	0xe000ed0c
 800447c:	20000d74 	.word	0x20000d74

08004480 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	@ 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800448c:	f7fe fd0c 	bl	8002ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004490:	4b5a      	ldr	r3, [pc, #360]	@ (80045fc <pvPortMalloc+0x17c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004498:	f000 f916 	bl	80046c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800449c:	4b58      	ldr	r3, [pc, #352]	@ (8004600 <pvPortMalloc+0x180>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 8090 	bne.w	80045ca <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01e      	beq.n	80044ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80044b0:	2208      	movs	r2, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d015      	beq.n	80044ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f023 0307 	bic.w	r3, r3, #7
 80044c8:	3308      	adds	r3, #8
 80044ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <pvPortMalloc+0x6e>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	617b      	str	r3, [r7, #20]
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d06a      	beq.n	80045ca <pvPortMalloc+0x14a>
 80044f4:	4b43      	ldr	r3, [pc, #268]	@ (8004604 <pvPortMalloc+0x184>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d865      	bhi.n	80045ca <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044fe:	4b42      	ldr	r3, [pc, #264]	@ (8004608 <pvPortMalloc+0x188>)
 8004500:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004502:	4b41      	ldr	r3, [pc, #260]	@ (8004608 <pvPortMalloc+0x188>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004508:	e004      	b.n	8004514 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d903      	bls.n	8004526 <pvPortMalloc+0xa6>
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f1      	bne.n	800450a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004526:	4b35      	ldr	r3, [pc, #212]	@ (80045fc <pvPortMalloc+0x17c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452c:	429a      	cmp	r2, r3
 800452e:	d04c      	beq.n	80045ca <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2208      	movs	r2, #8
 8004536:	4413      	add	r3, r2
 8004538:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	1ad2      	subs	r2, r2, r3
 800454a:	2308      	movs	r3, #8
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	429a      	cmp	r2, r3
 8004550:	d920      	bls.n	8004594 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4413      	add	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <pvPortMalloc+0xfc>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	613b      	str	r3, [r7, #16]
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	1ad2      	subs	r2, r2, r3
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800458e:	69b8      	ldr	r0, [r7, #24]
 8004590:	f000 f8fc 	bl	800478c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004594:	4b1b      	ldr	r3, [pc, #108]	@ (8004604 <pvPortMalloc+0x184>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	4a19      	ldr	r2, [pc, #100]	@ (8004604 <pvPortMalloc+0x184>)
 80045a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045a2:	4b18      	ldr	r3, [pc, #96]	@ (8004604 <pvPortMalloc+0x184>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4b19      	ldr	r3, [pc, #100]	@ (800460c <pvPortMalloc+0x18c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d203      	bcs.n	80045b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045ae:	4b15      	ldr	r3, [pc, #84]	@ (8004604 <pvPortMalloc+0x184>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a16      	ldr	r2, [pc, #88]	@ (800460c <pvPortMalloc+0x18c>)
 80045b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <pvPortMalloc+0x180>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	431a      	orrs	r2, r3
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045ca:	f7fe fc7b 	bl	8002ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <pvPortMalloc+0x170>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	60fb      	str	r3, [r7, #12]
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <pvPortMalloc+0x16c>
	return pvReturn;
 80045f0:	69fb      	ldr	r3, [r7, #28]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3728      	adds	r7, #40	@ 0x28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20001980 	.word	0x20001980
 8004600:	2000198c 	.word	0x2000198c
 8004604:	20001984 	.word	0x20001984
 8004608:	20001978 	.word	0x20001978
 800460c:	20001988 	.word	0x20001988

08004610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d04a      	beq.n	80046b8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004622:	2308      	movs	r3, #8
 8004624:	425b      	negs	r3, r3
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4413      	add	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	4b22      	ldr	r3, [pc, #136]	@ (80046c0 <vPortFree+0xb0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4013      	ands	r3, r2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <vPortFree+0x46>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	60fb      	str	r3, [r7, #12]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <vPortFree+0x66>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60bb      	str	r3, [r7, #8]
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	e7fd      	b.n	8004672 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	4b11      	ldr	r3, [pc, #68]	@ (80046c0 <vPortFree+0xb0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d019      	beq.n	80046b8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d115      	bne.n	80046b8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <vPortFree+0xb0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	43db      	mvns	r3, r3
 8004696:	401a      	ands	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800469c:	f7fe fc04 	bl	8002ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	4b07      	ldr	r3, [pc, #28]	@ (80046c4 <vPortFree+0xb4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4413      	add	r3, r2
 80046aa:	4a06      	ldr	r2, [pc, #24]	@ (80046c4 <vPortFree+0xb4>)
 80046ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ae:	6938      	ldr	r0, [r7, #16]
 80046b0:	f000 f86c 	bl	800478c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046b4:	f7fe fc06 	bl	8002ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046b8:	bf00      	nop
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	2000198c 	.word	0x2000198c
 80046c4:	20001984 	.word	0x20001984

080046c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80046d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046d4:	4b27      	ldr	r3, [pc, #156]	@ (8004774 <prvHeapInit+0xac>)
 80046d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3307      	adds	r3, #7
 80046e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0307 	bic.w	r3, r3, #7
 80046ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004774 <prvHeapInit+0xac>)
 80046f8:	4413      	add	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004700:	4a1d      	ldr	r2, [pc, #116]	@ (8004778 <prvHeapInit+0xb0>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004706:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <prvHeapInit+0xb0>)
 8004708:	2200      	movs	r2, #0
 800470a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	4413      	add	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004714:	2208      	movs	r2, #8
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0307 	bic.w	r3, r3, #7
 8004722:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a15      	ldr	r2, [pc, #84]	@ (800477c <prvHeapInit+0xb4>)
 8004728:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800472a:	4b14      	ldr	r3, [pc, #80]	@ (800477c <prvHeapInit+0xb4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2200      	movs	r2, #0
 8004730:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004732:	4b12      	ldr	r3, [pc, #72]	@ (800477c <prvHeapInit+0xb4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004748:	4b0c      	ldr	r3, [pc, #48]	@ (800477c <prvHeapInit+0xb4>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	4a0a      	ldr	r2, [pc, #40]	@ (8004780 <prvHeapInit+0xb8>)
 8004756:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <prvHeapInit+0xbc>)
 800475e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004760:	4b09      	ldr	r3, [pc, #36]	@ (8004788 <prvHeapInit+0xc0>)
 8004762:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004766:	601a      	str	r2, [r3, #0]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000d78 	.word	0x20000d78
 8004778:	20001978 	.word	0x20001978
 800477c:	20001980 	.word	0x20001980
 8004780:	20001988 	.word	0x20001988
 8004784:	20001984 	.word	0x20001984
 8004788:	2000198c 	.word	0x2000198c

0800478c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004794:	4b27      	ldr	r3, [pc, #156]	@ (8004834 <prvInsertBlockIntoFreeList+0xa8>)
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e002      	b.n	80047a0 <prvInsertBlockIntoFreeList+0x14>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d8f7      	bhi.n	800479a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4413      	add	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d108      	bne.n	80047ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	441a      	add	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	441a      	add	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d118      	bne.n	8004814 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b14      	ldr	r3, [pc, #80]	@ (8004838 <prvInsertBlockIntoFreeList+0xac>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d00d      	beq.n	800480a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	441a      	add	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e008      	b.n	800481c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800480a:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <prvInsertBlockIntoFreeList+0xac>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e003      	b.n	800481c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d002      	beq.n	800482a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	20001978 	.word	0x20001978
 8004838:	20001980 	.word	0x20001980

0800483c <memset>:
 800483c:	4603      	mov	r3, r0
 800483e:	4402      	add	r2, r0
 8004840:	4293      	cmp	r3, r2
 8004842:	d100      	bne.n	8004846 <memset+0xa>
 8004844:	4770      	bx	lr
 8004846:	f803 1b01 	strb.w	r1, [r3], #1
 800484a:	e7f9      	b.n	8004840 <memset+0x4>

0800484c <__libc_init_array>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	2600      	movs	r6, #0
 8004850:	4d0c      	ldr	r5, [pc, #48]	@ (8004884 <__libc_init_array+0x38>)
 8004852:	4c0d      	ldr	r4, [pc, #52]	@ (8004888 <__libc_init_array+0x3c>)
 8004854:	1b64      	subs	r4, r4, r5
 8004856:	10a4      	asrs	r4, r4, #2
 8004858:	42a6      	cmp	r6, r4
 800485a:	d109      	bne.n	8004870 <__libc_init_array+0x24>
 800485c:	f000 f828 	bl	80048b0 <_init>
 8004860:	2600      	movs	r6, #0
 8004862:	4d0a      	ldr	r5, [pc, #40]	@ (800488c <__libc_init_array+0x40>)
 8004864:	4c0a      	ldr	r4, [pc, #40]	@ (8004890 <__libc_init_array+0x44>)
 8004866:	1b64      	subs	r4, r4, r5
 8004868:	10a4      	asrs	r4, r4, #2
 800486a:	42a6      	cmp	r6, r4
 800486c:	d105      	bne.n	800487a <__libc_init_array+0x2e>
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	f855 3b04 	ldr.w	r3, [r5], #4
 8004874:	4798      	blx	r3
 8004876:	3601      	adds	r6, #1
 8004878:	e7ee      	b.n	8004858 <__libc_init_array+0xc>
 800487a:	f855 3b04 	ldr.w	r3, [r5], #4
 800487e:	4798      	blx	r3
 8004880:	3601      	adds	r6, #1
 8004882:	e7f2      	b.n	800486a <__libc_init_array+0x1e>
 8004884:	080049f8 	.word	0x080049f8
 8004888:	080049f8 	.word	0x080049f8
 800488c:	080049f8 	.word	0x080049f8
 8004890:	080049fc 	.word	0x080049fc

08004894 <memcpy>:
 8004894:	440a      	add	r2, r1
 8004896:	4291      	cmp	r1, r2
 8004898:	f100 33ff 	add.w	r3, r0, #4294967295
 800489c:	d100      	bne.n	80048a0 <memcpy+0xc>
 800489e:	4770      	bx	lr
 80048a0:	b510      	push	{r4, lr}
 80048a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048a6:	4291      	cmp	r1, r2
 80048a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ac:	d1f9      	bne.n	80048a2 <memcpy+0xe>
 80048ae:	bd10      	pop	{r4, pc}

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
